# PIPELINE DEFINITION
# Name: create-alluxio-runtime
# Inputs:
#    dataset_name: str
#    namespace: str
components:
  comp-create-alluxio-runtime:
    executorLabel: exec-create-alluxio-runtime
    inputDefinitions:
      parameters:
        dataset_name:
          parameterType: STRING
        namespace:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-create-alluxio-runtime:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - create_alluxio_runtime
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.4.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'git+https://github.com/fluid-cloudnative/fluid-client-python.git'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef create_alluxio_runtime(dataset_name: str, namespace: str):\n\
          \    import logging\n    from fluid import AlluxioRuntime, AlluxioRuntimeSpec,\
          \ models, FluidClient\n    from kubernetes import client as k8s_client\n\
          \n    fluid_client = FluidClient()\n\n    FLUID_GROUP = \"data.fluid.io\"\
          \n    FLUID_VERSION = \"v1alpha1\"\n\n    replicas = 1\n\n    # This is\
          \ the simplest configuration for AlluxioRuntime, you can change the AlluxioRuntime\
          \ according to your needs\n    alluxio_runtime = AlluxioRuntime(\n     \
          \   api_version=\"%s/%s\" % (FLUID_GROUP, FLUID_VERSION),\n        kind=\"\
          AlluxioRuntime\",\n        metadata=k8s_client.V1ObjectMeta(\n         \
          \   name=dataset_name,\n            namespace=namespace\n        ),\n  \
          \      spec=AlluxioRuntimeSpec(\n            replicas=replicas,\n      \
          \      tieredstore=models.TieredStore([models.Level('0.95', '0.7', 'MEM',\
          \ '/dev/shm', '2Gi', volume_type=None)])\n        )\n    )\n\n    fluid_client.create_runtime(alluxio_runtime)\n\
          \n\n    logging.info(f\"Runtime \\\"{alluxio_runtime.metadata.namespace}/{alluxio_runtime.metadata.name}\\\
          \" created successfully\")\n\n"
        image: python:3.7
pipelineInfo:
  name: create-alluxio-runtime
root:
  dag:
    tasks:
      create-alluxio-runtime:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-create-alluxio-runtime
        inputs:
          parameters:
            dataset_name:
              componentInputParameter: dataset_name
            namespace:
              componentInputParameter: namespace
        taskInfo:
          name: create-alluxio-runtime
  inputDefinitions:
    parameters:
      dataset_name:
        parameterType: STRING
      namespace:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.4.0

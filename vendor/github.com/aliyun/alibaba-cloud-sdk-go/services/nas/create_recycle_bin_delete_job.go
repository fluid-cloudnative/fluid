package nas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateRecycleBinDeleteJob invokes the nas.CreateRecycleBinDeleteJob API synchronously
func (client *Client) CreateRecycleBinDeleteJob(request *CreateRecycleBinDeleteJobRequest) (response *CreateRecycleBinDeleteJobResponse, err error) {
	response = CreateCreateRecycleBinDeleteJobResponse()
	err = client.DoAction(request, response)
	return
}

// CreateRecycleBinDeleteJobWithChan invokes the nas.CreateRecycleBinDeleteJob API asynchronously
func (client *Client) CreateRecycleBinDeleteJobWithChan(request *CreateRecycleBinDeleteJobRequest) (<-chan *CreateRecycleBinDeleteJobResponse, <-chan error) {
	responseChan := make(chan *CreateRecycleBinDeleteJobResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateRecycleBinDeleteJob(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateRecycleBinDeleteJobWithCallback invokes the nas.CreateRecycleBinDeleteJob API asynchronously
func (client *Client) CreateRecycleBinDeleteJobWithCallback(request *CreateRecycleBinDeleteJobRequest, callback func(response *CreateRecycleBinDeleteJobResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateRecycleBinDeleteJobResponse
		var err error
		defer close(result)
		response, err = client.CreateRecycleBinDeleteJob(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateRecycleBinDeleteJobRequest is the request struct for api CreateRecycleBinDeleteJob
type CreateRecycleBinDeleteJobRequest struct {
	*requests.RpcRequest
	ClientToken  string `position:"Query" name:"ClientToken"`
	FileSystemId string `position:"Query" name:"FileSystemId"`
	FileId       string `position:"Query" name:"FileId"`
}

// CreateRecycleBinDeleteJobResponse is the response struct for api CreateRecycleBinDeleteJob
type CreateRecycleBinDeleteJobResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	JobId     string `json:"JobId" xml:"JobId"`
}

// CreateCreateRecycleBinDeleteJobRequest creates a request to invoke CreateRecycleBinDeleteJob API
func CreateCreateRecycleBinDeleteJobRequest() (request *CreateRecycleBinDeleteJobRequest) {
	request = &CreateRecycleBinDeleteJobRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("NAS", "2017-06-26", "CreateRecycleBinDeleteJob", "nas", "openAPI")
	request.Method = requests.GET
	return
}

// CreateCreateRecycleBinDeleteJobResponse creates a response to parse from CreateRecycleBinDeleteJob response
func CreateCreateRecycleBinDeleteJobResponse() (response *CreateRecycleBinDeleteJobResponse) {
	response = &CreateRecycleBinDeleteJobResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}

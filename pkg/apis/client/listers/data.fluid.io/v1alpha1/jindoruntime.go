/*

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/fluid-cloudnative/fluid/api/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// JindoRuntimeLister helps list JindoRuntimes.
// All objects returned here must be treated as read-only.
type JindoRuntimeLister interface {
	// List lists all JindoRuntimes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.JindoRuntime, err error)
	// JindoRuntimes returns an object that can list and get JindoRuntimes.
	JindoRuntimes(namespace string) JindoRuntimeNamespaceLister
	JindoRuntimeListerExpansion
}

// jindoRuntimeLister implements the JindoRuntimeLister interface.
type jindoRuntimeLister struct {
	indexer cache.Indexer
}

// NewJindoRuntimeLister returns a new JindoRuntimeLister.
func NewJindoRuntimeLister(indexer cache.Indexer) JindoRuntimeLister {
	return &jindoRuntimeLister{indexer: indexer}
}

// List lists all JindoRuntimes in the indexer.
func (s *jindoRuntimeLister) List(selector labels.Selector) (ret []*v1alpha1.JindoRuntime, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JindoRuntime))
	})
	return ret, err
}

// JindoRuntimes returns an object that can list and get JindoRuntimes.
func (s *jindoRuntimeLister) JindoRuntimes(namespace string) JindoRuntimeNamespaceLister {
	return jindoRuntimeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// JindoRuntimeNamespaceLister helps list and get JindoRuntimes.
// All objects returned here must be treated as read-only.
type JindoRuntimeNamespaceLister interface {
	// List lists all JindoRuntimes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.JindoRuntime, err error)
	// Get retrieves the JindoRuntime from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.JindoRuntime, error)
	JindoRuntimeNamespaceListerExpansion
}

// jindoRuntimeNamespaceLister implements the JindoRuntimeNamespaceLister
// interface.
type jindoRuntimeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all JindoRuntimes in the indexer for a given namespace.
func (s jindoRuntimeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.JindoRuntime, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JindoRuntime))
	})
	return ret, err
}

// Get retrieves the JindoRuntime from the indexer for a given namespace and name.
func (s jindoRuntimeNamespaceLister) Get(name string) (*v1alpha1.JindoRuntime, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("jindoruntime"), name)
	}
	return obj.(*v1alpha1.JindoRuntime), nil
}

/*

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/fluid-cloudnative/fluid/api/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataBackupLister helps list DataBackups.
// All objects returned here must be treated as read-only.
type DataBackupLister interface {
	// List lists all DataBackups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataBackup, err error)
	// DataBackups returns an object that can list and get DataBackups.
	DataBackups(namespace string) DataBackupNamespaceLister
	DataBackupListerExpansion
}

// dataBackupLister implements the DataBackupLister interface.
type dataBackupLister struct {
	indexer cache.Indexer
}

// NewDataBackupLister returns a new DataBackupLister.
func NewDataBackupLister(indexer cache.Indexer) DataBackupLister {
	return &dataBackupLister{indexer: indexer}
}

// List lists all DataBackups in the indexer.
func (s *dataBackupLister) List(selector labels.Selector) (ret []*v1alpha1.DataBackup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataBackup))
	})
	return ret, err
}

// DataBackups returns an object that can list and get DataBackups.
func (s *dataBackupLister) DataBackups(namespace string) DataBackupNamespaceLister {
	return dataBackupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataBackupNamespaceLister helps list and get DataBackups.
// All objects returned here must be treated as read-only.
type DataBackupNamespaceLister interface {
	// List lists all DataBackups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataBackup, err error)
	// Get retrieves the DataBackup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DataBackup, error)
	DataBackupNamespaceListerExpansion
}

// dataBackupNamespaceLister implements the DataBackupNamespaceLister
// interface.
type dataBackupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataBackups in the indexer for a given namespace.
func (s dataBackupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataBackup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataBackup))
	})
	return ret, err
}

// Get retrieves the DataBackup from the indexer for a given namespace and name.
func (s dataBackupNamespaceLister) Get(name string) (*v1alpha1.DataBackup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("databackup"), name)
	}
	return obj.(*v1alpha1.DataBackup), nil
}

/*

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/fluid-cloudnative/fluid/api/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// JuiceFSRuntimeLister helps list JuiceFSRuntimes.
// All objects returned here must be treated as read-only.
type JuiceFSRuntimeLister interface {
	// List lists all JuiceFSRuntimes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.JuiceFSRuntime, err error)
	// JuiceFSRuntimes returns an object that can list and get JuiceFSRuntimes.
	JuiceFSRuntimes(namespace string) JuiceFSRuntimeNamespaceLister
	JuiceFSRuntimeListerExpansion
}

// juiceFSRuntimeLister implements the JuiceFSRuntimeLister interface.
type juiceFSRuntimeLister struct {
	indexer cache.Indexer
}

// NewJuiceFSRuntimeLister returns a new JuiceFSRuntimeLister.
func NewJuiceFSRuntimeLister(indexer cache.Indexer) JuiceFSRuntimeLister {
	return &juiceFSRuntimeLister{indexer: indexer}
}

// List lists all JuiceFSRuntimes in the indexer.
func (s *juiceFSRuntimeLister) List(selector labels.Selector) (ret []*v1alpha1.JuiceFSRuntime, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JuiceFSRuntime))
	})
	return ret, err
}

// JuiceFSRuntimes returns an object that can list and get JuiceFSRuntimes.
func (s *juiceFSRuntimeLister) JuiceFSRuntimes(namespace string) JuiceFSRuntimeNamespaceLister {
	return juiceFSRuntimeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// JuiceFSRuntimeNamespaceLister helps list and get JuiceFSRuntimes.
// All objects returned here must be treated as read-only.
type JuiceFSRuntimeNamespaceLister interface {
	// List lists all JuiceFSRuntimes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.JuiceFSRuntime, err error)
	// Get retrieves the JuiceFSRuntime from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.JuiceFSRuntime, error)
	JuiceFSRuntimeNamespaceListerExpansion
}

// juiceFSRuntimeNamespaceLister implements the JuiceFSRuntimeNamespaceLister
// interface.
type juiceFSRuntimeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all JuiceFSRuntimes in the indexer for a given namespace.
func (s juiceFSRuntimeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.JuiceFSRuntime, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JuiceFSRuntime))
	})
	return ret, err
}

// Get retrieves the JuiceFSRuntime from the indexer for a given namespace and name.
func (s juiceFSRuntimeNamespaceLister) Get(name string) (*v1alpha1.JuiceFSRuntime, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("juicefsruntime"), name)
	}
	return obj.(*v1alpha1.JuiceFSRuntime), nil
}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "%s-script" .Release.Name }}
  labels:
    release: {{ .Release.Name }}
    role: datamigrate-job
    {{- include "library.fluid.labels" . | nindent 4 }}
data:
  check_ssh.sh: |
    #!/bin/bash
    # usage: check_ssh.sh worker01 work02
    # note: can not add set -x as ssh may fail
    for host in "$@"; do
      gotStatus="-1"
      wantStatus="0"
      while [ $gotStatus -ne $wantStatus ]
      do
        ssh -o ConnectTimeout=2 -v $host exit
        gotStatus=$?
        if [ $gotStatus -ne $wantStatus ]; then
          echo "$(date '+%Y/%m/%d %H:%M:%S') Failed to ssh pod $host, retrying in 1 second..."
          sleep 1
        fi
      done
      echo "Successfully ssh pod: $host"
    done
  ssh.readiness: |
    #!/bin/bash
    set -xev
    # the image does not set 'StrictHostKeyChecking' in the /etc/ssh/ssh_config, set here manually.
    ssh -p $TARGET_SSH_PORT -o StrictHostKeyChecking=no localhost ls
  datamigrate.sh: |
    #!/bin/bash
    set -e

    function main() {
      echo "juicefs datamigrate job start..."
      scripts_dir=$(cd $(dirname $0); pwd)

      # handle parallel migrations
      parallel_options=""
      if [ $PARALLELISM -gt 1 ]
      then
        # the /root/.ssh is read only, so change the /etc/ssh/ssh_config.
        # This can also be set when build image in the dockerfile.
        sed -i "s/[ #]\(.*StrictHostKeyChecking \).*/ \1no/g" /etc/ssh/ssh_config
        sed -i "s/[ #]\(.*Port \).*/ \1 $TARGET_SSH_PORT /g" /etc/ssh/ssh_config
        echo "    UserKnownHostsFile /dev/null" >> /etc/ssh/ssh_config

        # start sshd
        /usr/sbin/sshd -p $TARGET_SSH_PORT

        # get all workers, and the launcher(localhost) is also a worker.
        # WORKER_NAME is "%s-workers-{}.%s-workers" where %s is the helm release name
        workers=()
        for num in $(seq 0 `expr $PARALLELISM - 2`)
        do
          workers[$num]=$(echo $WORKER_NAME_FORMAT | sed "s/{}/$num/g")
        done
        timeout ${SSH_READY_TIMEOUT} ${scripts_dir}/check_ssh.sh ${workers[@]}

        workers=$(echo "${workers[@]}" | tr ' ' ',')

        parallel_options="--worker localhost,${workers} --manager-addr ${POD_IP}"
        echo "distribute data migrate using options: $parallel_options"
      fi

      if [ $EDITION == 'community' ]
      then
        timeout $TIMEOUT /usr/local/bin/juicefs sync $parallel_options {{ .Values.datamigrate.migrateFrom }} {{ .Values.datamigrate.migrateTo }} $OPTION
      else
        {{- range $key, $val := .Values.datamigrate.options }}
        {{- if eq $key "formatCmd" }}
        {{ $val }}
        {{- end }}
        {{- end }}
        timeout $TIMEOUT /usr/bin/juicefs sync $parallel_options {{ .Values.datamigrate.migrateFrom }} {{ .Values.datamigrate.migrateTo }} $OPTION
      fi
      echo "juicefs datamigrate job end."
    }
    main "$@"

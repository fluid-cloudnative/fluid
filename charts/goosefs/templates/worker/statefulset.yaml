{{- $shortCircuitEnabled := .Values.shortCircuit.enabled }}
{{- $needDomainSocketVolume := and $shortCircuitEnabled (eq .Values.shortCircuit.policy "uuid") }}
{{- $hostNetwork := .Values.worker.hostNetwork }}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "goosefs.fullname" . }}-worker
  labels:
    app: {{ template "goosefs.name" . }}
    chart: {{ template "goosefs.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    role: goosefs-worker
    fluid.io/dataset: {{ .Release.Namespace }}-{{ .Release.Name }}
    fluid.io/dataset-placement: {{ .Values.placement }}
    {{- include "library.fluid.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app: {{ template "goosefs.name" . }}
      release: {{ .Release.Name }}
      role: goosefs-worker
  serviceName: {{ template "goosefs.fullname" . }}-worker
  replicas: {{ .Values.worker.replicaCount }}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      {{- if .Values.worker.annotations }}
{{ toYaml .Values.worker.annotations | trim | indent 8  }}
      {{- end }}
      labels:
        app: {{ template "goosefs.name" . }}
        chart: {{ template "goosefs.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        role: goosefs-worker
        fluid.io/dataset: {{ .Release.Namespace }}-{{ .Release.Name }}
        fluid.io/dataset-placement: {{ .Values.placement }}
    spec:
      enableServiceLinks: false
      hostNetwork: {{ $hostNetwork }}
      dnsPolicy: {{ .Values.worker.dnsPolicy | default ($hostNetwork | ternary "ClusterFirstWithHostNet" "ClusterFirst") }}
      securityContext:
        fsGroup: {{ .Values.fsGroup }}
      nodeSelector:
      {{- if .Values.worker.nodeSelector }}
{{ toYaml .Values.worker.nodeSelector | trim | indent 8  }}
      {{- else if .Values.nodeSelector }}
{{ toYaml .Values.nodeSelector | trim | indent 8  }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      initContainers:
        {{ if .Values.initUsers.enabled -}}
        - name: init-users
          image: {{ .Values.initUsers.image }}:{{ .Values.initUsers.imageTag }}
          imagePullPolicy: {{ .Values.initUsers.imagePullPolicy }}
          command: ["/entrypoint.sh"]
          args:
            - "init_users"
            - "chmod_tierpath"
          env:
          {{- if .Values.initUsers.envUsers }}
            - name: FLUID_INIT_USERS
              value: {{.Values.initUsers.envUsers | quote }}
          {{- end }}
          {{- if .Values.initUsers.envTieredPaths }}
            - name: FLUID_TIERSTORE_PATHS
              value: {{ .Values.initUsers.envTieredPaths | quote }}
          {{- end }}
          volumeMounts:
            - name: dir
              mountPath: /tmp
            - name: user
              mountPath: /tmp/passwd
            - name: group
              mountPath: /tmp/group
            {{- if .Values.tieredstore -}}
{{- include "goosefs.worker.tieredstoreVolumeMounts" . }}
            {{- end -}}
        {{- end }}
      containers:
        - name: goosefs-worker
          image: {{ .Values.image }}:{{ .Values.imageTag }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          securityContext:
            runAsUser: {{ .Values.user }}
            runAsGroup: {{ .Values.group }}
          {{- if .Values.worker.resources  }}
{{ include "goosefs.worker.resources" . | indent 10 }}
          {{- end }}
          command: ["/entrypoint.sh"]
          {{- if .Values.worker.args }}
          args:
{{ toYaml .Values.worker.args | trim | indent 12 }}
          {{- end }}
          env:
          - name: GOOSEFS_WORKER_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          {{- if not .Values.worker.hostNetwork }}
          - name: GOOSEFS_WORKER_CONTAINER_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          {{- end }}
          {{- range $key, $value := .Values.worker.env }}
          - name: "{{ $key }}"
            value: "{{ $value }}"
          {{- end }}
          envFrom:
          - configMapRef:
              name: {{ template "goosefs.fullname" . }}-config
          ports:
          - containerPort: {{ .Values.worker.ports.rpc }}
            name: rpc
          - containerPort: {{ .Values.worker.ports.web }}
            name: web
          volumeMounts:
            {{ if .Values.hadoopConfig  -}}
            {{ if or .Values.hadoopConfig.includeCoreSite .Values.hadoopConfig.includeHdfsSite -}}
            - name: hdfs-confs
              mountPath: /hdfs-config
              readOnly: true
            {{- end }}
            {{- end }}
            {{- if .Values.initUsers.enabled }}
            - name: user
              mountPath: /etc/passwd
              readOnly: true
            - name: group
              mountPath: /etc/group
              readOnly: true
            {{- end}}
            {{- if $needDomainSocketVolume }}
            - name: goosefs-domain
              mountPath: /opt/domain
            {{- end }}
            {{- if .Values.ufsPaths }}   
              {{- range .Values.ufsPaths }}
            - mountPath: {{ .containerPath }}
              name: {{ .name }}
              {{- end }}
            {{- end }}
            {{- if .Values.ufsVolumes }}   
              {{- range .Values.ufsVolumes }}
            - mountPath: {{ .containerPath }}
              name: {{ .name }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
              {{- end }}
            {{- end }}
            {{- if .Values.secrets -}}
              {{- if .Values.secrets.worker -}}
{{- include "goosefs.worker.secretVolumeMounts" . }}
              {{- end -}}
            {{- end -}}
            {{- if .Values.tieredstore -}}
{{- include "goosefs.worker.tieredstoreVolumeMounts" . }}
            {{- end -}}
            {{- if .Values.mounts -}}
{{- include "goosefs.worker.otherVolumeMounts" . }}
            {{- end }}
        - name: goosefs-job-worker
          image: {{ .Values.image }}:{{ .Values.imageTag }}
          securityContext:
            runAsUser: {{ .Values.user }}
            runAsGroup: {{ .Values.group }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- if .Values.jobWorker.resources  }}
{{ include "goosefs.jobWorker.resources" . | indent 10 }}
          {{- end }}
          command: ["/entrypoint.sh"]
          {{- if .Values.jobWorker.args }}
          args:
{{ toYaml .Values.jobWorker.args | trim | indent 12 }}
          {{- end }}
          env:
          - name: GOOSEFS_WORKER_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          {{- if not .Values.worker.hostNetwork }}
          - name: GOOSEFS_WORKER_CONTAINER_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          {{- end }}
          {{- range $key, $value := .Values.jobWorker.env }}
          - name: "{{ $key }}"
            value: "{{ $value }}"
          {{- end }}
          envFrom:
          - configMapRef:
              name: {{ template "goosefs.fullname" . }}-config
          ports:
          - containerPort: {{ .Values.jobWorker.ports.rpc }}
            name: job-rpc
          - containerPort: {{ .Values.jobWorker.ports.data }}
            name: job-data
          - containerPort: {{ .Values.jobWorker.ports.web }}
            name: job-web
          volumeMounts:
            {{ if .Values.hadoopConfig -}}
            {{ if or .Values.hadoopConfig.includeCoreSite .Values.hadoopConfig.includeHdfsSite -}}
            - name: hdfs-confs
              mountPath: /hdfs-config
              readOnly: true
            {{- end }}
            {{- end }}
            {{- if .Values.initUsers.enabled }}
            - name: user
              mountPath: /etc/passwd
              readOnly: true
            - name: group
              mountPath: /etc/group
              readOnly: true
            {{- end}}
            {{- if $needDomainSocketVolume }}
            - name: goosefs-domain
              mountPath: /opt/domain
            {{- end }}
            {{- if .Values.ufsPaths }}   
              {{- range .Values.ufsPaths }}
            - mountPath: {{ .containerPath }}
              name: {{ .name }}
              {{- end }}
            {{- end }}
            {{- if .Values.ufsVolumes }}   
              {{- range .Values.ufsVolumes }}
            - mountPath: {{ .containerPath }}
              name: {{ .name }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
              {{- end }}
            {{- end }}
            {{- if .Values.secrets }}
              {{- if .Values.secrets.worker }}
{{- include "goosefs.worker.secretVolumeMounts" . }}
              {{- end -}}
            {{- end }}
            {{- if .Values.tieredstore }}
{{- include "goosefs.worker.tieredstoreVolumeMounts" . }}
            {{- end }}
            {{- if .Values.mounts }}
{{- include "goosefs.worker.otherVolumeMounts" . }}
            {{- end }}
      restartPolicy: Always
      volumes:
        {{ if .Values.hadoopConfig -}}
        {{ if or .Values.hadoopConfig.includeCoreSite .Values.hadoopConfig.includeHdfsSite -}}
        - name: hdfs-confs
          configMap:
            name: {{ .Values.hadoopConfig.configMap }}
            items:
            {{ if .Values.hadoopConfig.includeHdfsSite -}}
            - key: hdfs-site.xml
              path: hdfs-site.xml
            {{- end }}
            {{- if .Values.hadoopConfig.includeCoreSite }}
            - key: core-site.xml
              path: core-site.xml
            {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.initUsers.enabled }}
        - name: dir
          hostPath:
            path: {{ .Values.initUsers.dir }}
            type: DirectoryOrCreate 
        - name: user         
          hostPath:
            path: {{ .Values.initUsers.dir }}/passwd
            type: FileOrCreate
        - name: group         
          hostPath:
            path: {{ .Values.initUsers.dir }}/group
            type: FileOrCreate
        {{- end }}
        {{- if $needDomainSocketVolume }}
{{- include "goosefs.worker.shortCircuit.volume" . }}
        {{- end }}
        {{- if .Values.secrets }}
          {{- if .Values.secrets.worker }}
{{- include "goosefs.worker.secretVolumes" . }}
          {{- end }}
        {{- end }}
        {{- if .Values.tieredstore }} 
{{- include "goosefs.worker.tieredstoreVolumes" . }}
        {{- end}}
        {{- if .Values.mounts }}   
          {{- range .Values.mounts }}
        - name: "{{ .name }}"
          persistentVolumeClaim:
            claimName: "{{ .name }}"
          {{- end }}
        {{- end }}
        {{- if .Values.ufsPaths }}   
          {{- range .Values.ufsPaths }}
        - hostPath:
            path: {{ .hostPath }}
            type: ""
          name: {{ .name }}
          {{- end }}
        {{- end }}
        {{- if .Values.ufsVolumes }}   
          {{- range .Values.ufsVolumes }}
        - name: "{{ .name }}"
          persistentVolumeClaim:
            claimName: "{{ .name }}"
          {{- end }}
        {{- end }}

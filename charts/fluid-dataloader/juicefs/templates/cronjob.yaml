# .Release.Name will be used to decide which dataset will be preload
# .Release.Name should be like `<pvc-name>-load`(e.g. hbase-load for a PersistentVolumeClaim named `hbase`)
# TODO: the length of .Release.Name won't exceed 53(limited by Helm), which means length of `<pvc-name>` can't exceed 48. This might be a problem.
  {{/*  {{  $datasetName := "" -}}*/}}
  {{/*  {{- $randomSuffix := "" -}}*/}}
  {{/*  {{- if regexMatch "^[A-Za-z0-9._-]+-load-[A-Za-z0-9]{5}$" .Release.Name -}}*/}}
  {{/*    {{- $arr := regexSplit "-load-" .Release.Name -1 -}}*/}}
  {{/*    {{- $datasetName = first $arr -}}*/}}
  {{/*    {{- $randomSuffix = last $arr -}}*/}}
  {{/*  {{- else -}}*/}}
  {{/*    {{- printf "Illegal release name. Should be like <dataset-name>-load-<suffix-length-5>. Current name: %s" .Release.Name | fail -}}*/}}
  {{/*  {{- end }}*/}}
{{- if eq (lower .Values.dataloader.policy) "cron" }}
apiVersion: {{ ternary "batch/v1" "batch/v1beta1" (.Capabilities.APIVersions.Has "batch/v1/CronJob") }}
kind: CronJob
metadata:
  name: {{ printf "%s-job" .Release.Name }}
  labels:
    release: {{ .Release.Name }}
    role: dataload-cronjob
    app: juicefs
    targetDataset: {{ required "targetDataset should be set" .Values.dataloader.targetDataset }}
    dataload: {{ .Values.name }}
    fluid.io/jobPolicy: cron
    {{- include "library.fluid.labels" . | nindent 4 }}
  ownerReferences:
    {{- if .Values.owner.enabled }}
    - apiVersion: {{ .Values.owner.apiVersion }}
      blockOwnerDeletion: {{ .Values.owner.blockOwnerDeletion }}
      controller: {{ .Values.owner.controller }}
      kind: {{ .Values.owner.kind }}
      name: {{ .Values.owner.name }}
      uid: {{ .Values.owner.uid }}
    {{- end }}
spec:
  schedule: "{{ .Values.dataloader.schedule }}"
  jobTemplate:
    spec:
      backoffLimit: {{ .Values.dataloader.backoffLimit | default "3" }}
      completions: 1
      parallelism: 1
      template:
        metadata:
          name: {{ printf "%s-loader" .Release.Name }}
          annotations:
            sidecar.istio.io/inject: "false"
          {{- if .Values.dataloader.annotations }}
          {{- range $key, $val := .Values.dataloader.annotations }}
            {{ $key | quote }}: {{ $val | quote }}
          {{- end }}
          {{- end }}
          labels:
            release: {{ .Release.Name }}
            role: dataload-pod
            app: juicefs
            cronjob: {{ printf "%s-job" .Release.Name }}
            targetDataset: {{ required "targetDataset should be set" .Values.dataloader.targetDataset }}
          {{- if .Values.dataloader.labels }}
          {{- range $key, $val := .Values.dataloader.labels }}
            {{ $key | quote }}: {{ $val | quote }}
          {{- end }}
          {{- end }}
        spec:
          {{- if .Values.dataloader.schedulerName }}
          schedulerName: {{ .Values.dataloader.schedulerName }}
          {{- end }}
          {{- with .Values.dataloader.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 8 }}
          {{- end }}
          {{- with .Values.dataloader.affinity }}
          affinity:
            {{- toYaml . | nindent 8 }}
          {{- end }}
          {{- with .Values.dataloader.tolerations }}
          tolerations:
            {{- toYaml . | nindent 8 }}
          {{- end }}
          restartPolicy: Never
          {{- range $key, $val := .Values.dataloader.options }}
          {{- if eq $key "runtimeName" }}
          serviceAccountName: {{ printf "%s-loader" $val | quote }}
          {{- end }}
          {{- end }}
          {{- with .Values.dataloader.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 8 }}
          {{- end }}
          containers:
            - name: dataloader
              image: {{ required "Dataloader image should be set" .Values.dataloader.image }}
              imagePullPolicy: IfNotPresent
              command: ["/bin/sh", "-c"]
              args: ["/scripts/juicefs_dataload.sh"]
              {{- if .Values.dataloader.resources }}
              resources:
              {{- toYaml .Values.dataloader.resources | nindent 16}}
              {{- end }}
              {{- $targetPaths := "" }}
              {{- range .Values.dataloader.targetPaths }}
              {{- $targetPaths = cat $targetPaths (required "Path must be set" .path) "" }}
              {{- end }}
              {{- $targetPaths = $targetPaths | trim }}

              {{- $pathReplicas := ""}}
              {{- range .Values.dataloader.targetPaths }}
              {{- $pathReplicas = cat $pathReplicas ( default 1 .replicas ) ":"}}
              {{- end }}
              {{- $pathReplicas = $pathReplicas | nospace | trimSuffix ":"}}
              env:
                - name: STORAGE_ADDRESS
                  valueFrom:
                    fieldRef:
                      fieldPath: status.podIP
                {{- range $key, $val := .Values.dataloader.options }}
                {{- if eq $key "cachedir" }}
                - name: CACHEDIR
                  value: {{ $val | quote }}
                {{- end }}
                {{- if eq $key "mountpath" }}
                - name: MOUNTPATH
                  value: {{ $val | quote }}
                {{- end }}
                {{- if eq $key "podNames" }}
                - name: POD_NAMES
                  value: {{ $val | quote }}
                {{- end }}
                {{- if eq $key "timeout" }}
                - name: TIMEOUT
                  value: {{ $val | quote }}
                {{- end }}
                {{- if eq $key "edition" }}
                - name: EDITION
                  value: {{ $val | quote }}
                {{- end }}
                {{- end }}
                - name: DATA_PATH
                  value: {{ $targetPaths | quote }}
                - name: PATH_REPLICAS
                  value: {{ $pathReplicas | quote }}
                - name: POD_NAMESPACE
                  value: {{ .Release.Namespace | quote }}
              envFrom:
                - configMapRef:
                    name: {{ required "targetDataset should be set" .Values.dataloader.targetDataset }}-juicefs-values
              volumeMounts:
                - mountPath: /scripts
                  name: data-load-script
          volumes:
            - name: data-load-script
              configMap:
                name: {{ printf "%s-data-load-script" .Release.Name }}
                items:
                  - key: dataloader.distributedLoad
                    path: juicefs_dataload.sh
                    mode: 365

{{- end }}
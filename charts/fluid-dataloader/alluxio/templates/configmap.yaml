apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "%s-data-load-script" .Release.Name }}
  labels:
    release: {{ .Release.Name }}
    role: dataload-job
    {{- include "library.fluid.labels" . | nindent 4 }}
data:
  dataloader.alluxio.init: |
    #!/usr/bin/env bash
    set -xe
    alluxio_env_vars=(
      ALLUXIO_CLASSPATH
      ALLUXIO_HOSTNAME
      ALLUXIO_JARS
      ALLUXIO_JAVA_OPTS
      ALLUXIO_MASTER_JAVA_OPTS
      ALLUXIO_PROXY_JAVA_OPTS
      ALLUXIO_RAM_FOLDER
      ALLUXIO_USER_JAVA_OPTS
      ALLUXIO_WORKER_JAVA_OPTS
      ALLUXIO_JOB_MASTER_JAVA_OPTS
      ALLUXIO_JOB_WORKER_JAVA_OPTS
    )
    ALLUXIO_HOME=/opt/alluxio
    function public::alluxio::init_conf() {
      local IFS=$'\n' # split by line instead of space
      for keyvaluepair in $(env); do
        # split around the first "="
        key=$(echo ${keyvaluepair} | cut -d= -f1)
        value=$(echo ${keyvaluepair} | cut -d= -f2-)
        if [[ "${alluxio_env_vars[*]}" =~ "${key}" ]]; then
          echo "export ${key}=\"${value}\"" >> $ALLUXIO_HOME/conf/alluxio-env.sh
        fi
      done
    }
    main() {
      public::alluxio::init_conf
    }
    main
  dataloader.distributedLoad: |
    #!/usr/bin/env bash
    set -xe
    
    function checkPathExistence() {
        local path=$1
        local checkPathResult=$(timeout 30s alluxio fs ls "$path" |& tail -1)
        local strUnexistence="does not exist"
        if [[ $checkPathResult =~ $strUnexistence ]]; then
            echo -e "dataLoad failed because some paths not exist."
            exit 1
        fi
    }

    function needPreLoadMetadata() {
      local alluxioVersion=$(alluxio version)
      test "$(echo "$alluxioVersion 2.8.0" | tr " " "\n" | sort -rV | head -n 1)" == "$alluxioVersion"
    }

    function distributedLoad() {
        local path=$1
        local replica=$2
        checkPathExistence "$path"
        alluxio fs setReplication --max $replica -R $path
        if [[ $needLoadMetadata == 'true' ]]; then
            # For Alluxio above 2.8.0, distributedLoad with -Dalluxio.user.file.metadata.sync.interval=0 cannot load new added file.
            # Related issue: https://github.com/Alluxio/alluxio/issues/17827
            # Use ls with -Dalluxio.user.file.metadata.sync.interval=0 instead
            if needPreLoadMetadata; then
                time alluxio fs ls -Dalluxio.user.file.metadata.sync.interval=0 -R $path
                time alluxio fs distributedLoad --replication $replica $path
            else
                time alluxio fs distributedLoad -Dalluxio.user.file.metadata.sync.interval=0 --replication $replica $path
            fi
        else
            time alluxio fs distributedLoad --replication $replica $path
        fi
    }
    
    function main() {
        needLoadMetadata="$NEED_LOAD_METADATA"
        if [[ $needLoadMetadata == 'true' ]]; then
            if [[ -d "/data" ]]; then
                du -sh "/data"
            fi
        fi
        paths="$DATA_PATH"
        paths=(${paths//:/ })
        replicas="$PATH_REPLICAS"
        replicas=(${replicas//:/ })
        for((i=0;i<${#paths[@]};i++)) do
            local path="${paths[i]}"
            local replica="${replicas[i]}"
            echo -e "distributedLoad on $path starts"
            distributedLoad ${paths[i]} ${replicas[i]}
            echo -e "distributedLoad on $path ends"
        done
    }
    
    main "$@"






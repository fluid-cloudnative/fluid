apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "%s-data-load-script" .Release.Name }}
  labels:
    release: {{ .Release.Name }}
    role: dataload-job
    {{- include "library.fluid.labels" . | nindent 4 }}
data:
  dataloader.goosefs.init: |
    #!/usr/bin/env bash
    set -xe
    goosefs_env_vars=(
      GOOSEFS_CLASSPATH
      GOOSEFS_HOSTNAME
      GOOSEFS_JARS
      GOOSEFS_JAVA_OPTS
      GOOSEFS_MASTER_JAVA_OPTS
      GOOSEFS_PROXY_JAVA_OPTS
      GOOSEFS_RAM_FOLDER
      GOOSEFS_USER_JAVA_OPTS
      GOOSEFS_WORKER_JAVA_OPTS
      GOOSEFS_JOB_MASTER_JAVA_OPTS
      GOOSEFS_JOB_WORKER_JAVA_OPTS
    )
    GOOSEFS_HOME=/opt/goosefs
    function public::goosefs::init_conf() {
      local IFS=$'\n' # split by line instead of space
      for keyvaluepair in $(env); do
        # split around the first "="
        key=$(echo ${keyvaluepair} | cut -d= -f1)
        value=$(echo ${keyvaluepair} | cut -d= -f2-)
        if [[ "${goosefs_env_vars[*]}" =~ "${key}" ]]; then
          echo "export ${key}=\"${value}\"" >> $GOOSEFS_HOME/conf/goosefs-env.sh
        fi
      done
    }
    main() {
      public::goosefs::init_conf
    }
    main
  dataloader.goosefs.distributedLoad: |
    #!/usr/bin/env bash
    set -xe
    
    function checkPathExistence() {
        local path=$1
        local checkPathResult=$(timeout 30s goosefs fs ls "$path" |& tail -1)
        local strUnexistence="does not exist"
        if [[ $checkPathResult =~ $strUnexistence ]]; then
            echo -e "dataLoad failed because some paths not exist."
            exit 1
        fi
    }

    function distributedLoad() {
        local path=$1
        local replica=$2
        checkPathExistence "$path"
        goosefs fs setReplication --max $replica -R $path
        if [[ $needLoadMetadata == 'true' ]]; then
            time goosefs fs distributedLoad -Dgoosefs.user.file.metadata.sync.interval=0 --replication $replica $path
        elif [[ $enableAtomicCache == 'true' ]]; then
            time goosefs fs distributedLoad -A --replication $replica $path --expire-time $atomicCacheTTL
        else
            time goosefs fs distributedLoad --replication $replica $path
        fi
    }
    
    function main() {
        needLoadMetadata="$NEED_LOAD_METADATA"
        enableAtomicCache="$ENABLE_ATOMIC_CACHE"
        atomicCacheTTL="$ATOMIC_CACHE_TTL"
        if [[ $enableAtomicCache == 'true' ]]; then
          needLoadMetadata="false"
           echo -e "when enable atomiccache, can't load metadata"
        fi

        if [[ $needLoadMetadata == 'true' ]]; then
            if [[ -d "/data" ]]; then
                du -sh "/data"
            fi
        fi
        paths="$DATA_PATH"
        paths=(${paths//:/ })
        replicas="$PATH_REPLICAS"
        replicas=(${replicas//:/ })
        for((i=0;i<${#paths[@]};i++)) do
            local path="${paths[i]}"
            local replica="${replicas[i]}"
            echo -e "distributedLoad on $path starts"
            distributedLoad ${paths[i]} ${replicas[i]}
            echo -e "distributedLoad on $path ends"
        done
    }
    
    main "$@"

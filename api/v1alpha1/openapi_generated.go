//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.APIGatewayStatus":         schema_fluid_cloudnative_fluid_api_v1alpha1_APIGatewayStatus(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioCompTemplateSpec":  schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioCompTemplateSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioFuseSpec":          schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioFuseSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioRuntime":           schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioRuntime(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioRuntimeList":       schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioRuntimeList(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioRuntimeSpec":       schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioRuntimeSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.BackupLocation":           schema_fluid_cloudnative_fluid_api_v1alpha1_BackupLocation(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.CacheableNodeAffinity":    schema_fluid_cloudnative_fluid_api_v1alpha1_CacheableNodeAffinity(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.Condition":                schema_fluid_cloudnative_fluid_api_v1alpha1_Condition(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.Data":                     schema_fluid_cloudnative_fluid_api_v1alpha1_Data(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackup":               schema_fluid_cloudnative_fluid_api_v1alpha1_DataBackup(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackupList":           schema_fluid_cloudnative_fluid_api_v1alpha1_DataBackupList(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackupSpec":           schema_fluid_cloudnative_fluid_api_v1alpha1_DataBackupSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackupStatus":         schema_fluid_cloudnative_fluid_api_v1alpha1_DataBackupStatus(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoad":                 schema_fluid_cloudnative_fluid_api_v1alpha1_DataLoad(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoadList":             schema_fluid_cloudnative_fluid_api_v1alpha1_DataLoadList(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoadSpec":             schema_fluid_cloudnative_fluid_api_v1alpha1_DataLoadSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoadStatus":           schema_fluid_cloudnative_fluid_api_v1alpha1_DataLoadStatus(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataRestoreLocation":      schema_fluid_cloudnative_fluid_api_v1alpha1_DataRestoreLocation(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.Dataset":                  schema_fluid_cloudnative_fluid_api_v1alpha1_Dataset(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetCondition":         schema_fluid_cloudnative_fluid_api_v1alpha1_DatasetCondition(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetList":              schema_fluid_cloudnative_fluid_api_v1alpha1_DatasetList(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetSpec":              schema_fluid_cloudnative_fluid_api_v1alpha1_DatasetSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetStatus":            schema_fluid_cloudnative_fluid_api_v1alpha1_DatasetStatus(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.EncryptOption":            schema_fluid_cloudnative_fluid_api_v1alpha1_EncryptOption(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.EncryptOptionSource":      schema_fluid_cloudnative_fluid_api_v1alpha1_EncryptOptionSource(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.GooseFSCompTemplateSpec":  schema_fluid_cloudnative_fluid_api_v1alpha1_GooseFSCompTemplateSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.GooseFSFuseSpec":          schema_fluid_cloudnative_fluid_api_v1alpha1_GooseFSFuseSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.GooseFSRuntime":           schema_fluid_cloudnative_fluid_api_v1alpha1_GooseFSRuntime(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.GooseFSRuntimeList":       schema_fluid_cloudnative_fluid_api_v1alpha1_GooseFSRuntimeList(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.GooseFSRuntimeSpec":       schema_fluid_cloudnative_fluid_api_v1alpha1_GooseFSRuntimeSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.HCFSStatus":               schema_fluid_cloudnative_fluid_api_v1alpha1_HCFSStatus(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.InitUsersSpec":            schema_fluid_cloudnative_fluid_api_v1alpha1_InitUsersSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoCompTemplateSpec":    schema_fluid_cloudnative_fluid_api_v1alpha1_JindoCompTemplateSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoFuseSpec":            schema_fluid_cloudnative_fluid_api_v1alpha1_JindoFuseSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoRuntime":             schema_fluid_cloudnative_fluid_api_v1alpha1_JindoRuntime(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoRuntimeList":         schema_fluid_cloudnative_fluid_api_v1alpha1_JindoRuntimeList(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoRuntimeSpec":         schema_fluid_cloudnative_fluid_api_v1alpha1_JindoRuntimeSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.JuiceFSCompTemplateSpec":  schema_fluid_cloudnative_fluid_api_v1alpha1_JuiceFSCompTemplateSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.JuiceFSFuseSpec":          schema_fluid_cloudnative_fluid_api_v1alpha1_JuiceFSFuseSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.JuiceFSRuntime":           schema_fluid_cloudnative_fluid_api_v1alpha1_JuiceFSRuntime(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.JuiceFSRuntimeList":       schema_fluid_cloudnative_fluid_api_v1alpha1_JuiceFSRuntimeList(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.JuiceFSRuntimeSpec":       schema_fluid_cloudnative_fluid_api_v1alpha1_JuiceFSRuntimeSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.Level":                    schema_fluid_cloudnative_fluid_api_v1alpha1_Level(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.Mount":                    schema_fluid_cloudnative_fluid_api_v1alpha1_Mount(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata":              schema_fluid_cloudnative_fluid_api_v1alpha1_PodMetadata(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.Runtime":                  schema_fluid_cloudnative_fluid_api_v1alpha1_Runtime(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeCondition":         schema_fluid_cloudnative_fluid_api_v1alpha1_RuntimeCondition(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeStatus":            schema_fluid_cloudnative_fluid_api_v1alpha1_RuntimeStatus(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.SecretKeySelector":        schema_fluid_cloudnative_fluid_api_v1alpha1_SecretKeySelector(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.TargetDataset":            schema_fluid_cloudnative_fluid_api_v1alpha1_TargetDataset(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.TargetPath":               schema_fluid_cloudnative_fluid_api_v1alpha1_TargetPath(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinCompTemplateSpec":     schema_fluid_cloudnative_fluid_api_v1alpha1_ThinCompTemplateSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinFuseSpec":             schema_fluid_cloudnative_fluid_api_v1alpha1_ThinFuseSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinRuntime":              schema_fluid_cloudnative_fluid_api_v1alpha1_ThinRuntime(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinRuntimeList":          schema_fluid_cloudnative_fluid_api_v1alpha1_ThinRuntimeList(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinRuntimeProfile":       schema_fluid_cloudnative_fluid_api_v1alpha1_ThinRuntimeProfile(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinRuntimeProfileList":   schema_fluid_cloudnative_fluid_api_v1alpha1_ThinRuntimeProfileList(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinRuntimeProfileSpec":   schema_fluid_cloudnative_fluid_api_v1alpha1_ThinRuntimeProfileSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinRuntimeProfileStatus": schema_fluid_cloudnative_fluid_api_v1alpha1_ThinRuntimeProfileStatus(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinRuntimeSpec":          schema_fluid_cloudnative_fluid_api_v1alpha1_ThinRuntimeSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.TieredStore":              schema_fluid_cloudnative_fluid_api_v1alpha1_TieredStore(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.User":                     schema_fluid_cloudnative_fluid_api_v1alpha1_User(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec":              schema_fluid_cloudnative_fluid_api_v1alpha1_VersionSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.VolumeSource":             schema_fluid_cloudnative_fluid_api_v1alpha1_VolumeSource(ref),
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_APIGatewayStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "API Gateway",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"endpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "Endpoint for accessing",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioCompTemplateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AlluxioCompTemplateSpec is a description of the Alluxio commponents",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1. replicas is the min replicas of dataset in the cluster",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"jvmOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "Options for JVM",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"properties": {
						SchemaProps: spec.SchemaProps{
							Description: "Configurable properties for the Alluxio component. <br> Refer to <a href=\"https://docs.alluxio.io/os/user/stable/en/reference/Properties-List.html\">Alluxio Configuration Properties</a> for more info",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Ports used by Alluxio(e.g. rpc: 19998 for master)",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: 0,
										Type:    []string{"integer"},
										Format:  "int32",
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources that will be requested by the Alluxio component. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables that will be used by Alluxio component. <br>",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled or Disabled for the components. For now, only  API Gateway is enabled or disabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the master to fit on a node",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"networkMode": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to use hostnetwork or not",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeMounts": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeMounts specifies the volumes listed in \".spec.volumes\" to mount into the alluxio runtime component's filesystem.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"podMetadata": {
						SchemaProps: spec.SchemaProps{
							Description: "PodMetadata defines labels and annotations that will be propagated to Alluxio's pods",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioFuseSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AlluxioFuseSpec is a description of the Alluxio Fuse",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image for Alluxio Fuse(e.g. alluxio/alluxio-fuse)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imageTag": {
						SchemaProps: spec.SchemaProps{
							Description: "Image Tag for Alluxio Fuse(e.g. 2.3.0-SNAPSHOT)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "One of the three policies: `Always`, `IfNotPresent`, `Never`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"jvmOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "Options for JVM",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"properties": {
						SchemaProps: spec.SchemaProps{
							Description: "Configurable properties for Alluxio System. <br> Refer to <a href=\"https://docs.alluxio.io/os/user/stable/en/reference/Properties-List.html\">Alluxio Configuration Properties</a> for more info",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables that will be used by Alluxio Fuse",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources that will be requested by Alluxio Fuse. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"args": {
						SchemaProps: spec.SchemaProps{
							Description: "Arguments that will be passed to Alluxio Fuse",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"global": {
						SchemaProps: spec.SchemaProps{
							Description: "If the fuse client should be deployed in global mode, otherwise the affinity should be considered",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the fuse client to fit on a node, this option only effect when global is enabled",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"cleanPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "CleanPolicy decides when to clean Alluxio Fuse pods. Currently Fluid supports two policies: OnDemand and OnRuntimeDeleted OnDemand cleans fuse pod once the fuse pod on some node is not needed OnRuntimeDeleted cleans fuse pod only when the cache runtime is deleted Defaults to OnRuntimeDeleted",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkMode": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to use hostnetwork or not",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeMounts": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeMounts specifies the volumes listed in \".spec.volumes\" to mount into the alluxio runtime component's filesystem.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"podMetadata": {
						SchemaProps: spec.SchemaProps{
							Description: "PodMetadata defines labels and annotations that will be propagated to Alluxio's fuse pods",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioRuntime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AlluxioRuntime is the Schema for the alluxioruntimes API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioRuntimeSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioRuntimeSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioRuntimeList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AlluxioRuntimeList contains a list of AlluxioRuntime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioRuntime"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioRuntime", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioRuntimeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AlluxioRuntimeSpec defines the desired state of AlluxioRuntime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"alluxioVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "The version information that instructs fluid to orchestrate a particular version of Alluxio.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec"),
						},
					},
					"master": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of Alluxio master",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioCompTemplateSpec"),
						},
					},
					"jobMaster": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of Alluxio job master",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioCompTemplateSpec"),
						},
					},
					"worker": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of Alluxio worker",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioCompTemplateSpec"),
						},
					},
					"jobWorker": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of Alluxio job Worker",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioCompTemplateSpec"),
						},
					},
					"apiGateway": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of Alluxio API Gateway",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioCompTemplateSpec"),
						},
					},
					"initUsers": {
						SchemaProps: spec.SchemaProps{
							Description: "The spec of init users",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.InitUsersSpec"),
						},
					},
					"fuse": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of Alluxio Fuse",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioFuseSpec"),
						},
					},
					"properties": {
						SchemaProps: spec.SchemaProps{
							Description: "Configurable properties for Alluxio system. <br> Refer to <a href=\"https://docs.alluxio.io/os/user/stable/en/reference/Properties-List.html\">Alluxio Configuration Properties</a> for more info",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"jvmOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "Options for JVM",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"tieredstore": {
						SchemaProps: spec.SchemaProps{
							Description: "Tiered storage used by Alluxio",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.TieredStore"),
						},
					},
					"data": {
						SchemaProps: spec.SchemaProps{
							Description: "Management strategies for the dataset to which the runtime is bound",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Data"),
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The replicas of the worker, need to be specified",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"runAs": {
						SchemaProps: spec.SchemaProps{
							Description: "Manage the user to run Alluxio Runtime",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.User"),
						},
					},
					"disablePrometheus": {
						SchemaProps: spec.SchemaProps{
							Description: "Disable monitoring for Alluxio Runtime Prometheus is enabled by default",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"hadoopConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the configMap used to support HDFS configurations when using HDFS as Alluxio's UFS. The configMap must be in the same namespace with the AlluxioRuntime. The configMap should contain user-specific HDFS conf files in it. For now, only \"hdfs-site.xml\" and \"core-site.xml\" are supported. It must take the filename of the conf file as the key and content of the file as the value.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumes": {
						SchemaProps: spec.SchemaProps{
							Description: "Volumes is the list of Kubernetes volumes that can be mounted by the alluxio runtime components and/or fuses.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"podMetadata": {
						SchemaProps: spec.SchemaProps{
							Description: "PodMetadata defines labels and annotations that will be propagated to Alluxio's pods",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioCompTemplateSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioFuseSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.Data", "github.com/fluid-cloudnative/fluid/api/v1alpha1.InitUsersSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata", "github.com/fluid-cloudnative/fluid/api/v1alpha1.TieredStore", "github.com/fluid-cloudnative/fluid/api/v1alpha1.User", "github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec", "k8s.io/api/core/v1.Volume"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_BackupLocation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BackupLocation describes the final backup location of DataBackup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path describes the path of backup, in the form of local:///absolutePath or pvc://<pvcName>/subpath",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeName": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeName describes the nodeName of backup if Path is in the form of local://subpath",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_CacheableNodeAffinity(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CacheableNodeAffinity defines constraints that limit what nodes this dataset can be cached to.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"required": {
						SchemaProps: spec.SchemaProps{
							Description: "Required specifies hard node constraints that must be met.",
							Ref:         ref("k8s.io/api/core/v1.NodeSelector"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.NodeSelector"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_Condition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Condition explains the transitions on phase",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of condition, either `Complete` or `Failed`",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of `True`, `False` or `Unknown`",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "Reason for the condition's last transition",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Message is a human-readable message indicating details about the transition",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastProbeTime": {
						SchemaProps: spec.SchemaProps{
							Description: "LastProbeTime describes last time this condition was updated.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "LastTransitionTime describes last time the condition transitioned from one status to another.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_Data(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Data management strategies",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The copies of the dataset",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"pin": {
						SchemaProps: spec.SchemaProps{
							Description: "Pin the dataset or not. Refer to <a href=\"https://docs.alluxio.io/os/user/stable/en/operation/User-CLI.html#pin\">Alluxio User-CLI pin</a>",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataBackup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataBackup is the Schema for the backup API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackupSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackupStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackupSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackupStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataBackupList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataBackupList contains a list of DataBackup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackup"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackup", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataBackupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataBackupSpec defines the desired state of DataBackup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dataset": {
						SchemaProps: spec.SchemaProps{
							Description: "Dataset defines the target dataset of the DataBackup",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"backupPath": {
						SchemaProps: spec.SchemaProps{
							Description: "BackupPath defines the target path to save data of the DataBackup",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"runAs": {
						SchemaProps: spec.SchemaProps{
							Description: "Manage the user to run Alluxio DataBackup",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.User"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.User"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataBackupStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataBackupStatus defines the observed state of DataBackup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase describes current phase of DataBackup",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"backupLocation": {
						SchemaProps: spec.SchemaProps{
							Description: "BackupLocation tell user the location to save data of the DataBackup",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.BackupLocation"),
						},
					},
					"duration": {
						SchemaProps: spec.SchemaProps{
							Description: "Duration tell user how much time was spent to backup",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions consists of transition information on DataBackup's Phase",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"phase", "duration", "conditions"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.BackupLocation", "github.com/fluid-cloudnative/fluid/api/v1alpha1.Condition"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataLoad(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataLoad is the Schema for the dataloads API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoadSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoadStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoadSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoadStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataLoadList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataLoadList contains a list of DataLoad",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoad"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoad", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataLoadSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataLoadSpec defines the desired state of DataLoad",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dataset": {
						SchemaProps: spec.SchemaProps{
							Description: "Dataset defines the target dataset of the DataLoad",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.TargetDataset"),
						},
					},
					"loadMetadata": {
						SchemaProps: spec.SchemaProps{
							Description: "LoadMetadata specifies if the dataload job should load metadata",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "Target defines target paths that needs to be loaded",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.TargetPath"),
									},
								},
							},
						},
					},
					"options": {
						SchemaProps: spec.SchemaProps{
							Description: "Options specifies the extra dataload properties for runtime",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"podMetadata": {
						SchemaProps: spec.SchemaProps{
							Description: "PodMetadata defines labels and annotations that will be propagated to DataLoad pods",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata", "github.com/fluid-cloudnative/fluid/api/v1alpha1.TargetDataset", "github.com/fluid-cloudnative/fluid/api/v1alpha1.TargetPath"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataLoadStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataLoadStatus defines the observed state of DataLoad",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase describes current phase of DataLoad",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions consists of transition information on DataLoad's Phase",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
					"duration": {
						SchemaProps: spec.SchemaProps{
							Description: "Duration tell user how much time was spent to load the data",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"phase", "conditions", "duration"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.Condition"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataRestoreLocation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataRestoreLocation describes the spec restore location of  Dataset",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path describes the path of restore, in the form of  local://subpath or pvc://<pvcName>/subpath",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeName": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeName describes the nodeName of restore if Path is  in the form of local://subpath",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_Dataset(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Dataset is the Schema for the datasets API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DatasetCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Condition describes the state of the cache at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of cache condition.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DatasetList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatasetList contains a list of Dataset",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Dataset"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.Dataset", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DatasetSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatasetSpec defines the desired state of Dataset",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"mounts": {
						SchemaProps: spec.SchemaProps{
							Description: "Mount Points to be mounted on Alluxio.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Mount"),
									},
								},
							},
						},
					},
					"owner": {
						SchemaProps: spec.SchemaProps{
							Description: "The owner of the dataset",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.User"),
						},
					},
					"nodeAffinity": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeAffinity defines constraints that limit what nodes this dataset can be cached to. This field influences the scheduling of pods that use the cached dataset.",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.CacheableNodeAffinity"),
						},
					},
					"tolerations": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's tolerations.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"accessModes": {
						SchemaProps: spec.SchemaProps{
							Description: "AccessModes contains all ways the volume backing the PVC can be mounted",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"runtimes": {
						SchemaProps: spec.SchemaProps{
							Description: "Runtimes for supporting dataset (e.g. AlluxioRuntime)",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Runtime"),
									},
								},
							},
						},
					},
					"placement": {
						SchemaProps: spec.SchemaProps{
							Description: "Manage switch for opening Multiple datasets single node deployment or not",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dataRestoreLocation": {
						SchemaProps: spec.SchemaProps{
							Description: "DataRestoreLocation is the location to load data of dataset  been backuped",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DataRestoreLocation"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.CacheableNodeAffinity", "github.com/fluid-cloudnative/fluid/api/v1alpha1.DataRestoreLocation", "github.com/fluid-cloudnative/fluid/api/v1alpha1.Mount", "github.com/fluid-cloudnative/fluid/api/v1alpha1.Runtime", "github.com/fluid-cloudnative/fluid/api/v1alpha1.User", "k8s.io/api/core/v1.Toleration"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DatasetStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatasetStatus defines the observed state of Dataset",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"mounts": {
						SchemaProps: spec.SchemaProps{
							Description: "the info of mount points have been mounted",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Mount"),
									},
								},
							},
						},
					},
					"ufsTotal": {
						SchemaProps: spec.SchemaProps{
							Description: "Total in GB of dataset in the cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Dataset Phase. One of the four phases: `Pending`, `Bound`, `NotBound` and `Failed`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"runtimes": {
						SchemaProps: spec.SchemaProps{
							Description: "Runtimes for supporting dataset",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Runtime"),
									},
								},
							},
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current observed conditions.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetCondition"),
									},
								},
							},
						},
					},
					"cacheStates": {
						SchemaProps: spec.SchemaProps{
							Description: "CacheStatus represents the total resources of the dataset.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"hcfs": {
						SchemaProps: spec.SchemaProps{
							Description: "HCFSStatus represents hcfs info",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.HCFSStatus"),
						},
					},
					"fileNum": {
						SchemaProps: spec.SchemaProps{
							Description: "FileNum represents the file numbers of the dataset",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dataLoadRef": {
						SchemaProps: spec.SchemaProps{
							Description: "DataLoadRef specifies the running DataLoad job that targets this Dataset. This is mainly used as a lock to prevent concurrent DataLoad jobs.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dataBackupRef": {
						SchemaProps: spec.SchemaProps{
							Description: "DataBackupRef specifies the running Backup job that targets this Dataset. This is mainly used as a lock to prevent concurrent DataBackup jobs.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"conditions"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetCondition", "github.com/fluid-cloudnative/fluid/api/v1alpha1.HCFSStatus", "github.com/fluid-cloudnative/fluid/api/v1alpha1.Mount", "github.com/fluid-cloudnative/fluid/api/v1alpha1.Runtime"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_EncryptOption(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of encryptOption",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"valueFrom": {
						SchemaProps: spec.SchemaProps{
							Description: "The valueFrom of encryptOption",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.EncryptOptionSource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.EncryptOptionSource"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_EncryptOptionSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"secretKeyRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The encryptInfo obtained from secret",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.SecretKeySelector"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.SecretKeySelector"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_GooseFSCompTemplateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GooseFSCompTemplateSpec is a description of the GooseFS commponents",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1. replicas is the min replicas of dataset in the cluster",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"jvmOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "Options for JVM",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"properties": {
						SchemaProps: spec.SchemaProps{
							Description: "Configurable properties for the GOOSEFS component. <br> Refer to <a href=\"https://cloud.tencent.com/document/product/436/56415\">GOOSEFS Configuration Properties</a> for more info",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Ports used by GooseFS(e.g. rpc: 19998 for master)",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: 0,
										Type:    []string{"integer"},
										Format:  "int32",
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources that will be requested by the GooseFS component. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables that will be used by GooseFS component. <br>",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled or Disabled for the components. For now, only  API Gateway is enabled or disabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the master to fit on a node",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_GooseFSFuseSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GooseFSFuseSpec is a description of the GooseFS Fuse",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image for GooseFS Fuse(e.g. goosefs/goosefs-fuse)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imageTag": {
						SchemaProps: spec.SchemaProps{
							Description: "Image Tag for GooseFS Fuse(e.g. v1.0.1)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "One of the three policies: `Always`, `IfNotPresent`, `Never`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"jvmOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "Options for JVM",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"properties": {
						SchemaProps: spec.SchemaProps{
							Description: "Configurable properties for the GOOSEFS component. <br> Refer to <a href=\"https://cloud.tencent.com/document/product/436/56415\">GOOSEFS Configuration Properties</a> for more info",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables that will be used by GooseFS Fuse",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources that will be requested by GooseFS Fuse. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"args": {
						SchemaProps: spec.SchemaProps{
							Description: "Arguments that will be passed to GooseFS Fuse",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"global": {
						SchemaProps: spec.SchemaProps{
							Description: "If the fuse client should be deployed in global mode, otherwise the affinity should be considered",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the fuse client to fit on a node, this option only effect when global is enabled",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"cleanPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "CleanPolicy decides when to clean GooseFS Fuse pods. Currently Fluid supports two policies: OnDemand and OnRuntimeDeleted OnDemand cleans fuse pod once th fuse pod on some node is not needed OnRuntimeDeleted cleans fuse pod only when the cache runtime is deleted Defaults to OnRuntimeDeleted",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_GooseFSRuntime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GooseFSRuntime is the Schema for the goosefsruntimes API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.GooseFSRuntimeSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.GooseFSRuntimeSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_GooseFSRuntimeList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GooseFSRuntimeList contains a list of GooseFSRuntime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.GooseFSRuntime"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.GooseFSRuntime", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_GooseFSRuntimeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GooseFSRuntimeSpec defines the desired state of GooseFSRuntime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"goosefsVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "The version information that instructs fluid to orchestrate a particular version of GooseFS.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec"),
						},
					},
					"master": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of GooseFS master",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.GooseFSCompTemplateSpec"),
						},
					},
					"jobMaster": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of GooseFS job master",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.GooseFSCompTemplateSpec"),
						},
					},
					"worker": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of GooseFS worker",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.GooseFSCompTemplateSpec"),
						},
					},
					"jobWorker": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of GooseFS job Worker",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.GooseFSCompTemplateSpec"),
						},
					},
					"apiGateway": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of GooseFS API Gateway",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.GooseFSCompTemplateSpec"),
						},
					},
					"initUsers": {
						SchemaProps: spec.SchemaProps{
							Description: "The spec of init users",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.InitUsersSpec"),
						},
					},
					"fuse": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of GooseFS Fuse",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.GooseFSFuseSpec"),
						},
					},
					"properties": {
						SchemaProps: spec.SchemaProps{
							Description: "Configurable properties for the GOOSEFS component. <br> Refer to <a href=\"https://cloud.tencent.com/document/product/436/56415\">GOOSEFS Configuration Properties</a> for more info",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"jvmOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "Options for JVM",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"tieredstore": {
						SchemaProps: spec.SchemaProps{
							Description: "Tiered storage used by GooseFS",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.TieredStore"),
						},
					},
					"data": {
						SchemaProps: spec.SchemaProps{
							Description: "Management strategies for the dataset to which the runtime is bound",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Data"),
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The replicas of the worker, need to be specified",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"runAs": {
						SchemaProps: spec.SchemaProps{
							Description: "Manage the user to run GooseFS Runtime GooseFS support POSIX-ACL and Apache Ranger to manager authorization",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.User"),
						},
					},
					"disablePrometheus": {
						SchemaProps: spec.SchemaProps{
							Description: "Disable monitoring for GooseFS Runtime Prometheus is enabled by default",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"hadoopConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the configMap used to support HDFS configurations when using HDFS as GooseFS's UFS. The configMap must be in the same namespace with the GooseFSRuntime. The configMap should contain user-specific HDFS conf files in it. For now, only \"hdfs-site.xml\" and \"core-site.xml\" are supported. It must take the filename of the conf file as the key and content of the file as the value.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.Data", "github.com/fluid-cloudnative/fluid/api/v1alpha1.GooseFSCompTemplateSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.GooseFSFuseSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.InitUsersSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.TieredStore", "github.com/fluid-cloudnative/fluid/api/v1alpha1.User", "github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_HCFSStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HCFS Endpoint info",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"endpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "Endpoint for accessing",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"underlayerFileSystemVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "Underlayer HCFS Compatible Version",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_InitUsersSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InitUsersSpec is a description of the initialize the users for runtime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image for initialize the users for runtime(e.g. alluxio/alluxio-User init)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imageTag": {
						SchemaProps: spec.SchemaProps{
							Description: "Image Tag for initialize the users for runtime(e.g. 2.3.0-SNAPSHOT)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "One of the three policies: `Always`, `IfNotPresent`, `Never`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables that will be used by initialize the users for runtime",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources that will be requested by initialize the users for runtime. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_JindoCompTemplateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JindoCompTemplateSpec is a description of the Jindo commponents",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1. replicas is the min replicas of dataset in the cluster",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"properties": {
						SchemaProps: spec.SchemaProps{
							Description: "Configurable properties for the Jindo component. <br>",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: 0,
										Type:    []string{"integer"},
										Format:  "int32",
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources that will be requested by the Jindo component. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables that will be used by Jindo component. <br>",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the master to fit on a node",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"tolerations": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's tolerations.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels will be added on JindoFS Master or Worker pods. DEPRECATED: This is a deprecated field. Please use PodMetadata instead. Note: this field is set to be exclusive with PodMetadata.Labels",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"podMetadata": {
						SchemaProps: spec.SchemaProps{
							Description: "PodMetadata defines labels and annotations that will be propagated to Jindo's pods",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata"),
						},
					},
					"disabled": {
						SchemaProps: spec.SchemaProps{
							Description: "If disable JindoFS master or worker",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Toleration"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_JindoFuseSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JindoFuseSpec is a description of the Jindo Fuse",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image for Jindo Fuse(e.g. jindo/jindo-fuse)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imageTag": {
						SchemaProps: spec.SchemaProps{
							Description: "Image Tag for Jindo Fuse(e.g. 2.3.0-SNAPSHOT)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "One of the three policies: `Always`, `IfNotPresent`, `Never`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"properties": {
						SchemaProps: spec.SchemaProps{
							Description: "Configurable properties for Jindo System. <br>",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables that will be used by Jindo Fuse",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources that will be requested by Jindo Fuse. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"args": {
						SchemaProps: spec.SchemaProps{
							Description: "Arguments that will be passed to Jindo Fuse",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"global": {
						SchemaProps: spec.SchemaProps{
							Description: "If the fuse client should be deployed in global mode, otherwise the affinity should be considered",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the fuse client to fit on a node, this option only effect when global is enabled",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"tolerations": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's tolerations.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels will be added on all the JindoFS pods. DEPRECATED: this is a deprecated field. Please use PodMetadata.Labels instead. Note: this field is set to be exclusive with PodMetadata.Labels",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"podMetadata": {
						SchemaProps: spec.SchemaProps{
							Description: "PodMetadata defines labels and annotations that will be propagated to Jindo's fuse pods",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata"),
						},
					},
					"cleanPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "CleanPolicy decides when to clean JindoFS Fuse pods. Currently Fluid supports two policies: OnDemand and OnRuntimeDeleted OnDemand cleans fuse pod once th fuse pod on some node is not needed OnRuntimeDeleted cleans fuse pod only when the cache runtime is deleted Defaults to OnRuntimeDeleted",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"disabled": {
						SchemaProps: spec.SchemaProps{
							Description: "If disable JindoFS fuse",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Toleration"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_JindoRuntime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JindoRuntime is the Schema for the jindoruntimes API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoRuntimeSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoRuntimeSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_JindoRuntimeList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JindoRuntimeList contains a list of JindoRuntime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoRuntime"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoRuntime", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_JindoRuntimeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JindoRuntimeSpec defines the desired state of JindoRuntime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"jindoVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "The version information that instructs fluid to orchestrate a particular version of Jindo.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec"),
						},
					},
					"master": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of Jindo master",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoCompTemplateSpec"),
						},
					},
					"worker": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of Jindo worker",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoCompTemplateSpec"),
						},
					},
					"fuse": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of Jindo Fuse",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoFuseSpec"),
						},
					},
					"properties": {
						SchemaProps: spec.SchemaProps{
							Description: "Configurable properties for Jindo system. <br>",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"tieredstore": {
						SchemaProps: spec.SchemaProps{
							Description: "Tiered storage used by Jindo",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.TieredStore"),
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The replicas of the worker, need to be specified",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"runAs": {
						SchemaProps: spec.SchemaProps{
							Description: "Manage the user to run Jindo Runtime",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.User"),
						},
					},
					"user": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"hadoopConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the configMap used to support HDFS configurations when using HDFS as Jindo's UFS. The configMap must be in the same namespace with the JindoRuntime. The configMap should contain user-specific HDFS conf files in it. For now, only \"hdfs-site.xml\" and \"core-site.xml\" are supported. It must take the filename of the conf file as the key and content of the file as the value.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secret": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels will be added on all the JindoFS pods. DEPRECATED: this is a deprecated field. Please use PodMetadata.Labels instead. Note: this field is set to be exclusive with PodMetadata.Labels",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"podMetadata": {
						SchemaProps: spec.SchemaProps{
							Description: "PodMetadata defines labels and annotations that will be propagated to all Jindo's fuse pods",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata"),
						},
					},
					"logConfig": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"networkmode": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to use hostnetwork or not",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoCompTemplateSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoFuseSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata", "github.com/fluid-cloudnative/fluid/api/v1alpha1.TieredStore", "github.com/fluid-cloudnative/fluid/api/v1alpha1.User", "github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_JuiceFSCompTemplateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JuiceFSCompTemplateSpec is a description of the JuiceFS components",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1. replicas is the min replicas of dataset in the cluster",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Ports used by JuiceFS",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ContainerPort"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources that will be requested by the JuiceFS component.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"options": {
						SchemaProps: spec.SchemaProps{
							Description: "Options",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables that will be used by JuiceFS component.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled or Disabled for the components.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"volumeMounts": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeMounts specifies the volumes listed in \".spec.volumes\" to mount into runtime component's filesystem.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"podMetadata": {
						SchemaProps: spec.SchemaProps{
							Description: "PodMetadata defines labels and annotations that will be propagated to JuiceFs's pods.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata", "k8s.io/api/core/v1.ContainerPort", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_JuiceFSFuseSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image for JuiceFS fuse",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imageTag": {
						SchemaProps: spec.SchemaProps{
							Description: "Image for JuiceFS fuse",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "One of the three policies: `Always`, `IfNotPresent`, `Never`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables that will be used by JuiceFS Fuse",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources that will be requested by JuiceFS Fuse.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"global": {
						SchemaProps: spec.SchemaProps{
							Description: "If the fuse client should be deployed in global mode, otherwise the affinity should be considered",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the fuse client to fit on a node, this option only effect when global is enabled",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"volumeMounts": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeMounts specifies the volumes listed in \".spec.volumes\" to mount into runtime component's filesystem.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"cleanPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "CleanPolicy decides when to clean Juicefs Fuse pods. Currently Fluid supports two policies: OnDemand and OnRuntimeDeleted OnDemand cleans fuse pod once th fuse pod on some node is not needed OnRuntimeDeleted cleans fuse pod only when the cache runtime is deleted Defaults to OnDemand",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"podMetadata": {
						SchemaProps: spec.SchemaProps{
							Description: "PodMetadata defines labels and annotations that will be propagated to JuiceFs's pods.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_JuiceFSRuntime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JuiceFSRuntime is the Schema for the juicefsruntimes API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.JuiceFSRuntimeSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.JuiceFSRuntimeSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_JuiceFSRuntimeList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JuiceFSRuntimeList contains a list of JuiceFSRuntime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.JuiceFSRuntime"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.JuiceFSRuntime", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_JuiceFSRuntimeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JuiceFSRuntimeSpec defines the desired state of JuiceFSRuntime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"juicefsVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "The version information that instructs fluid to orchestrate a particular version of JuiceFS.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec"),
						},
					},
					"initUsers": {
						SchemaProps: spec.SchemaProps{
							Description: "The spec of init users",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.InitUsersSpec"),
						},
					},
					"master": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of JuiceFS master",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.JuiceFSCompTemplateSpec"),
						},
					},
					"worker": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of JuiceFS worker",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.JuiceFSCompTemplateSpec"),
						},
					},
					"jobWorker": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of JuiceFS job Worker",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.JuiceFSCompTemplateSpec"),
						},
					},
					"fuse": {
						SchemaProps: spec.SchemaProps{
							Description: "Desired state for JuiceFS Fuse",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.JuiceFSFuseSpec"),
						},
					},
					"tieredstore": {
						SchemaProps: spec.SchemaProps{
							Description: "Tiered storage used by JuiceFS",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.TieredStore"),
						},
					},
					"configs": {
						SchemaProps: spec.SchemaProps{
							Description: "Configs of JuiceFS",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The replicas of the worker, need to be specified",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"runAs": {
						SchemaProps: spec.SchemaProps{
							Description: "Manage the user to run Juicefs Runtime",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.User"),
						},
					},
					"disablePrometheus": {
						SchemaProps: spec.SchemaProps{
							Description: "Disable monitoring for JuiceFS Runtime Prometheus is enabled by default",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"volumes": {
						SchemaProps: spec.SchemaProps{
							Description: "Volumes is the list of Kubernetes volumes that can be mounted by the alluxio runtime components and/or fuses.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"podMetadata": {
						SchemaProps: spec.SchemaProps{
							Description: "PodMetadata defines labels and annotations that will be propagated to JuiceFs's pods.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.InitUsersSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.JuiceFSCompTemplateSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.JuiceFSFuseSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.PodMetadata", "github.com/fluid-cloudnative/fluid/api/v1alpha1.TieredStore", "github.com/fluid-cloudnative/fluid/api/v1alpha1.User", "github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec", "k8s.io/api/core/v1.Volume"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_Level(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Level describes configurations a tier needs. <br> Refer to <a href=\"https://docs.alluxio.io/os/user/stable/en/core-services/Caching.html#configuring-tiered-storage\">Configuring Tiered Storage</a> for more info",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"mediumtype": {
						SchemaProps: spec.SchemaProps{
							Description: "Medium Type of the tier. One of the three types: `MEM`, `SSD`, `HDD`",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeType": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeType is the volume type of the tier. Should be one of the three types: `hostPath`, `emptyDir` and `volumeTemplate`. If not set, defaults to hostPath.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeSource": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeSource is the volume source of the tier. It follows the form of corev1.VolumeSource. For now, users should only specify VolumeSource when VolumeType is set to emptyDir.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.VolumeSource"),
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "File paths to be used for the tier. Multiple paths are supported. Multiple paths should be separated with comma. For example: \"/mnt/cache1,/mnt/cache2\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"quota": {
						SchemaProps: spec.SchemaProps{
							Description: "Quota for the whole tier. (e.g. 100Gi) Please note that if there're multiple paths used for this tierstore, the quota will be equally divided into these paths. If you'd like to set quota for each, path, see QuotaList for more information.",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"quotaList": {
						SchemaProps: spec.SchemaProps{
							Description: "QuotaList are quotas used to set quota on multiple paths. Quotas should be separated with comma. Quotas in this list will be set to paths with the same order in Path. For example, with Path defined with \"/mnt/cache1,/mnt/cache2\" and QuotaList set to \"100Gi, 50Gi\", then we get 100GiB cache storage under \"/mnt/cache1\" and 50GiB under \"/mnt/cache2\". Also note that num of quotas must be consistent with the num of paths defined in Path.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"high": {
						SchemaProps: spec.SchemaProps{
							Description: "Ratio of high watermark of the tier (e.g. 0.9)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"low": {
						SchemaProps: spec.SchemaProps{
							Description: "Ratio of low watermark of the tier (e.g. 0.7)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"mediumtype"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.VolumeSource", "k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_Mount(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Mount describes a mounting. <br> Refer to <a href=\"https://docs.alluxio.io/os/user/stable/en/ufs/S3.html\">Alluxio Storage Integrations</a> for more info",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"mountPoint": {
						SchemaProps: spec.SchemaProps{
							Description: "MountPoint is the mount point of source.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"options": {
						SchemaProps: spec.SchemaProps{
							Description: "The Mount Options. <br> Refer to <a href=\"https://docs.alluxio.io/os/user/stable/en/reference/Properties-List.html\">Mount Options</a>.  <br> The option has Prefix 'fs.' And you can Learn more from <a href=\"https://docs.alluxio.io/os/user/stable/en/ufs/S3.html\">The Storage Integrations</a>",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of mount",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "The path of mount, if not set will be /{Name}",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Defaults to false (read-write).",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"shared": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Defaults to false (shared).",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"encryptOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "The secret information",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.EncryptOption"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.EncryptOption"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_PodMetadata(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodMetadata defines subgroup properties of metav1.ObjectMeta",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels are labels of pod specification",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations are annotations of pod specification",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_Runtime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Runtime describes a runtime to be used to support dataset",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the runtime object",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace of the runtime object",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"category": {
						SchemaProps: spec.SchemaProps{
							Description: "Category the runtime object belongs to (e.g. Accelerate)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Runtime object's type (e.g. Alluxio)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"masterReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Runtime master replicas",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_RuntimeCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Condition describes the state of the cache at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of cache condition.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastProbeTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_RuntimeStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RuntimeStatus defines the observed state of Runtime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"valueFile": {
						SchemaProps: spec.SchemaProps{
							Description: "config map used to set configurations",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"masterPhase": {
						SchemaProps: spec.SchemaProps{
							Description: "MasterPhase is the master running phase",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"masterReason": {
						SchemaProps: spec.SchemaProps{
							Description: "Reason for Master's condition transition",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"workerPhase": {
						SchemaProps: spec.SchemaProps{
							Description: "WorkerPhase is the worker running phase",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"workerReason": {
						SchemaProps: spec.SchemaProps{
							Description: "Reason for Worker's condition transition",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"desiredWorkerNumberScheduled": {
						SchemaProps: spec.SchemaProps{
							Description: "The total number of nodes that should be running the runtime worker pod (including nodes correctly running the runtime worker pod).",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"currentWorkerNumberScheduled": {
						SchemaProps: spec.SchemaProps{
							Description: "The total number of nodes that can be running the runtime worker pod (including nodes correctly running the runtime worker pod).",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"workerNumberReady": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of nodes that should be running the runtime worker pod and have one or more of the runtime worker pod running and ready.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"workerNumberAvailable": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of nodes that should be running the runtime worker pod and have one or more of the runtime worker pod running and available (ready for at least spec.minReadySeconds)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"workerNumberUnavailable": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of nodes that should be running the runtime worker pod and have none of the runtime worker pod running and available (ready for at least spec.minReadySeconds)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"desiredMasterNumberScheduled": {
						SchemaProps: spec.SchemaProps{
							Description: "The total number of nodes that should be running the runtime pod (including nodes correctly running the runtime master pod).",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"currentMasterNumberScheduled": {
						SchemaProps: spec.SchemaProps{
							Description: "The total number of nodes that should be running the runtime pod (including nodes correctly running the runtime master pod).",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"masterNumberReady": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of nodes that should be running the runtime worker pod and have zero or more of the runtime master pod running and ready.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"fusePhase": {
						SchemaProps: spec.SchemaProps{
							Description: "FusePhase is the Fuse running phase",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fuseReason": {
						SchemaProps: spec.SchemaProps{
							Description: "Reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"currentFuseNumberScheduled": {
						SchemaProps: spec.SchemaProps{
							Description: "The total number of nodes that can be running the runtime Fuse pod (including nodes correctly running the runtime Fuse pod).",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"desiredFuseNumberScheduled": {
						SchemaProps: spec.SchemaProps{
							Description: "The total number of nodes that should be running the runtime Fuse pod (including nodes correctly running the runtime Fuse pod).",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"fuseNumberReady": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of nodes that should be running the runtime Fuse pod and have one or more of the runtime Fuse pod running and ready.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"fuseNumberUnavailable": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of nodes that should be running the runtime fuse pod and have none of the runtime fuse pod running and available (ready for at least spec.minReadySeconds)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"fuseNumberAvailable": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of nodes that should be running the runtime Fuse pod and have one or more of the runtime Fuse pod running and available (ready for at least spec.minReadySeconds)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"setupDuration": {
						SchemaProps: spec.SchemaProps{
							Description: "Duration tell user how much time was spent to setup the runtime",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a ddc runtime's current state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeCondition"),
									},
								},
							},
						},
					},
					"cacheStates": {
						SchemaProps: spec.SchemaProps{
							Description: "CacheStatus represents the total resources of the dataset.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"selector": {
						SchemaProps: spec.SchemaProps{
							Description: "Selector is used for auto-scaling",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiGateway": {
						SchemaProps: spec.SchemaProps{
							Description: "APIGatewayStatus represents rest api gateway status",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.APIGatewayStatus"),
						},
					},
					"mountTime": {
						SchemaProps: spec.SchemaProps{
							Description: "MountTime represents time last mount happened if Mounttime is earlier than master starting time, remount will be required",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
				Required: []string{"valueFile", "masterPhase", "workerPhase", "desiredWorkerNumberScheduled", "currentWorkerNumberScheduled", "workerNumberReady", "desiredMasterNumberScheduled", "currentMasterNumberScheduled", "masterNumberReady", "fusePhase", "currentFuseNumberScheduled", "desiredFuseNumberScheduled", "fuseNumberReady"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.APIGatewayStatus", "github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeCondition", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_SecretKeySelector(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of required secret",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"key": {
						SchemaProps: spec.SchemaProps{
							Description: "The required key in the secret",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_TargetDataset(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TargetDataset defines the target dataset of the DataLoad",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name defines name of the target dataset",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace defines namespace of the target dataset",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_TargetPath(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TargetPath defines the target path of the DataLoad",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path defines path to be load",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas defines how many replicas will be loaded",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"path"},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_ThinCompTemplateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ThinCompTemplateSpec is a description of the thinRuntime components",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1. replicas is the min replicas of dataset in the cluster",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Ports used thinRuntime",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ContainerPort"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources that will be requested by thinRuntime component.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables that will be used by thinRuntime component.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled or Disabled for the components.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"volumeMounts": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeMounts specifies the volumes listed in \".spec.volumes\" to mount into runtime component's filesystem.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"livenessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "livenessProbe of thin fuse pod",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
					"readinessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "readinessProbe of thin fuse pod",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
					"networkMode": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to use hostnetwork or not",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ContainerPort", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.Probe", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_ThinFuseSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image for thinRuntime fuse",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imageTag": {
						SchemaProps: spec.SchemaProps{
							Description: "Image for thinRuntime fuse",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "One of the three policies: `Always`, `IfNotPresent`, `Never`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Ports used thinRuntime",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ContainerPort"),
									},
								},
							},
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables that will be used by thinRuntime Fuse",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"command": {
						SchemaProps: spec.SchemaProps{
							Description: "Command that will be passed to thinRuntime Fuse",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"args": {
						SchemaProps: spec.SchemaProps{
							Description: "Arguments that will be passed to thinRuntime Fuse",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"options": {
						SchemaProps: spec.SchemaProps{
							Description: "Options configurable options of FUSE client, performance parameters usually. will be merged with Dataset.spec.mounts.options into fuse pod.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources that will be requested by thinRuntime Fuse.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the fuse client to fit on a node, this option only effect when global is enabled",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"cleanPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "CleanPolicy decides when to clean thinRuntime Fuse pods. Currently Fluid supports two policies: OnDemand and OnRuntimeDeleted OnDemand cleans fuse pod once the fuse pod on some node is not needed OnRuntimeDeleted cleans fuse pod only when the cache runtime is deleted Defaults to OnDemand",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkMode": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to use hostnetwork or not",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"livenessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "livenessProbe of thin fuse pod",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
					"readinessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "readinessProbe of thin fuse pod",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
					"volumeMounts": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeMounts specifies the volumes listed in \".spec.volumes\" to mount into the thinruntime component's filesystem.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ContainerPort", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.Probe", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_ThinRuntime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ThinRuntime is the Schema for the thinruntimes API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinRuntimeSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeStatus", "github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinRuntimeSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_ThinRuntimeList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ThinRuntimeList contains a list of ThinRuntime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinRuntime"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinRuntime", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_ThinRuntimeProfile(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ThinRuntimeProfile is the Schema for the ThinRuntimeProfiles API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinRuntimeProfileSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinRuntimeProfileStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinRuntimeProfileSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinRuntimeProfileStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_ThinRuntimeProfileList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ThinRuntimeProfileList contains a list of ThinRuntimeProfile",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinRuntimeProfile"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinRuntimeProfile", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_ThinRuntimeProfileSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ThinRuntimeProfileSpec defines the desired state of ThinRuntimeProfile",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "The version information that instructs fluid to orchestrate a particular version,",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec"),
						},
					},
					"worker": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of worker",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinCompTemplateSpec"),
						},
					},
					"fuse": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of thinRuntime",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinFuseSpec"),
						},
					},
					"volumes": {
						SchemaProps: spec.SchemaProps{
							Description: "Volumes is the list of Kubernetes volumes that can be mounted by runtime components and/or fuses.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinCompTemplateSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinFuseSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec", "k8s.io/api/core/v1.Volume"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_ThinRuntimeProfileStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ThinRuntimeProfileStatus defines the observed state of ThinRuntimeProfile",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_ThinRuntimeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ThinRuntimeSpec defines the desired state of ThinRuntime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"profileName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"fileSystemType": {
						SchemaProps: spec.SchemaProps{
							Description: "file system of thinRuntime",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "The version information that instructs fluid to orchestrate a particular version,",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec"),
						},
					},
					"worker": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of worker",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinCompTemplateSpec"),
						},
					},
					"fuse": {
						SchemaProps: spec.SchemaProps{
							Description: "The component spec of thinRuntime",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinFuseSpec"),
						},
					},
					"tieredstore": {
						SchemaProps: spec.SchemaProps{
							Description: "Tiered storage",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.TieredStore"),
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The replicas of the worker, need to be specified",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"runAs": {
						SchemaProps: spec.SchemaProps{
							Description: "Manage the user to run Runtime",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.User"),
						},
					},
					"disablePrometheus": {
						SchemaProps: spec.SchemaProps{
							Description: "Disable monitoring for Runtime Prometheus is enabled by default",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"volumes": {
						SchemaProps: spec.SchemaProps{
							Description: "Volumes is the list of Kubernetes volumes that can be mounted by runtime components and/or fuses.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
				},
				Required: []string{"fileSystemType"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinCompTemplateSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.ThinFuseSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.TieredStore", "github.com/fluid-cloudnative/fluid/api/v1alpha1.User", "github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec", "k8s.io/api/core/v1.Volume"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_TieredStore(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TieredStore is a description of the tiered store",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"levels": {
						SchemaProps: spec.SchemaProps{
							Description: "configurations for multiple tiers",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Level"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.Level"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_User(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "User explains the user and group to run a Container",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "The uid to run the alluxio runtime",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"gid": {
						SchemaProps: spec.SchemaProps{
							Description: "The gid to run the alluxio runtime",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"user": {
						SchemaProps: spec.SchemaProps{
							Description: "The user name to run the alluxio runtime",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"group": {
						SchemaProps: spec.SchemaProps{
							Description: "The group name to run the alluxio runtime",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"uid", "gid", "user", "group"},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_VersionSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VersionSpec represents the settings for the  version that fluid is orchestrating.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image (e.g. alluxio/alluxio)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imageTag": {
						SchemaProps: spec.SchemaProps{
							Description: "Image tag (e.g. 2.3.0-SNAPSHOT)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "One of the three policies: `Always`, `IfNotPresent`, `Never`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_VolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VolumeSource defines volume source and volume claim template.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"hostPath": {
						SchemaProps: spec.SchemaProps{
							Description: "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
							Ref:         ref("k8s.io/api/core/v1.HostPathVolumeSource"),
						},
					},
					"emptyDir": {
						SchemaProps: spec.SchemaProps{
							Description: "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
							Ref:         ref("k8s.io/api/core/v1.EmptyDirVolumeSource"),
						},
					},
					"gcePersistentDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
							Ref:         ref("k8s.io/api/core/v1.GCEPersistentDiskVolumeSource"),
						},
					},
					"awsElasticBlockStore": {
						SchemaProps: spec.SchemaProps{
							Description: "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
							Ref:         ref("k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource"),
						},
					},
					"gitRepo": {
						SchemaProps: spec.SchemaProps{
							Description: "GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
							Ref:         ref("k8s.io/api/core/v1.GitRepoVolumeSource"),
						},
					},
					"secret": {
						SchemaProps: spec.SchemaProps{
							Description: "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
							Ref:         ref("k8s.io/api/core/v1.SecretVolumeSource"),
						},
					},
					"nfs": {
						SchemaProps: spec.SchemaProps{
							Description: "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
							Ref:         ref("k8s.io/api/core/v1.NFSVolumeSource"),
						},
					},
					"iscsi": {
						SchemaProps: spec.SchemaProps{
							Description: "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md",
							Ref:         ref("k8s.io/api/core/v1.ISCSIVolumeSource"),
						},
					},
					"glusterfs": {
						SchemaProps: spec.SchemaProps{
							Description: "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
							Ref:         ref("k8s.io/api/core/v1.GlusterfsVolumeSource"),
						},
					},
					"persistentVolumeClaim": {
						SchemaProps: spec.SchemaProps{
							Description: "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource"),
						},
					},
					"rbd": {
						SchemaProps: spec.SchemaProps{
							Description: "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
							Ref:         ref("k8s.io/api/core/v1.RBDVolumeSource"),
						},
					},
					"flexVolume": {
						SchemaProps: spec.SchemaProps{
							Description: "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
							Ref:         ref("k8s.io/api/core/v1.FlexVolumeSource"),
						},
					},
					"cinder": {
						SchemaProps: spec.SchemaProps{
							Description: "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
							Ref:         ref("k8s.io/api/core/v1.CinderVolumeSource"),
						},
					},
					"cephfs": {
						SchemaProps: spec.SchemaProps{
							Description: "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
							Ref:         ref("k8s.io/api/core/v1.CephFSVolumeSource"),
						},
					},
					"flocker": {
						SchemaProps: spec.SchemaProps{
							Description: "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
							Ref:         ref("k8s.io/api/core/v1.FlockerVolumeSource"),
						},
					},
					"downwardAPI": {
						SchemaProps: spec.SchemaProps{
							Description: "DownwardAPI represents downward API about the pod that should populate this volume",
							Ref:         ref("k8s.io/api/core/v1.DownwardAPIVolumeSource"),
						},
					},
					"fc": {
						SchemaProps: spec.SchemaProps{
							Description: "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
							Ref:         ref("k8s.io/api/core/v1.FCVolumeSource"),
						},
					},
					"azureFile": {
						SchemaProps: spec.SchemaProps{
							Description: "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
							Ref:         ref("k8s.io/api/core/v1.AzureFileVolumeSource"),
						},
					},
					"configMap": {
						SchemaProps: spec.SchemaProps{
							Description: "ConfigMap represents a configMap that should populate this volume",
							Ref:         ref("k8s.io/api/core/v1.ConfigMapVolumeSource"),
						},
					},
					"vsphereVolume": {
						SchemaProps: spec.SchemaProps{
							Description: "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
							Ref:         ref("k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"),
						},
					},
					"quobyte": {
						SchemaProps: spec.SchemaProps{
							Description: "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
							Ref:         ref("k8s.io/api/core/v1.QuobyteVolumeSource"),
						},
					},
					"azureDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
							Ref:         ref("k8s.io/api/core/v1.AzureDiskVolumeSource"),
						},
					},
					"photonPersistentDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
							Ref:         ref("k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource"),
						},
					},
					"projected": {
						SchemaProps: spec.SchemaProps{
							Description: "Items for all in one resources secrets, configmaps, and downward API",
							Ref:         ref("k8s.io/api/core/v1.ProjectedVolumeSource"),
						},
					},
					"portworxVolume": {
						SchemaProps: spec.SchemaProps{
							Description: "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
							Ref:         ref("k8s.io/api/core/v1.PortworxVolumeSource"),
						},
					},
					"scaleIO": {
						SchemaProps: spec.SchemaProps{
							Description: "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
							Ref:         ref("k8s.io/api/core/v1.ScaleIOVolumeSource"),
						},
					},
					"storageos": {
						SchemaProps: spec.SchemaProps{
							Description: "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
							Ref:         ref("k8s.io/api/core/v1.StorageOSVolumeSource"),
						},
					},
					"csi": {
						SchemaProps: spec.SchemaProps{
							Description: "CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).",
							Ref:         ref("k8s.io/api/core/v1.CSIVolumeSource"),
						},
					},
					"ephemeral": {
						SchemaProps: spec.SchemaProps{
							Description: "Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.\n\nUse this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\nA pod can use both types of ephemeral volumes and persistent volumes at the same time.",
							Ref:         ref("k8s.io/api/core/v1.EphemeralVolumeSource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource", "k8s.io/api/core/v1.AzureDiskVolumeSource", "k8s.io/api/core/v1.AzureFileVolumeSource", "k8s.io/api/core/v1.CSIVolumeSource", "k8s.io/api/core/v1.CephFSVolumeSource", "k8s.io/api/core/v1.CinderVolumeSource", "k8s.io/api/core/v1.ConfigMapVolumeSource", "k8s.io/api/core/v1.DownwardAPIVolumeSource", "k8s.io/api/core/v1.EmptyDirVolumeSource", "k8s.io/api/core/v1.EphemeralVolumeSource", "k8s.io/api/core/v1.FCVolumeSource", "k8s.io/api/core/v1.FlexVolumeSource", "k8s.io/api/core/v1.FlockerVolumeSource", "k8s.io/api/core/v1.GCEPersistentDiskVolumeSource", "k8s.io/api/core/v1.GitRepoVolumeSource", "k8s.io/api/core/v1.GlusterfsVolumeSource", "k8s.io/api/core/v1.HostPathVolumeSource", "k8s.io/api/core/v1.ISCSIVolumeSource", "k8s.io/api/core/v1.NFSVolumeSource", "k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource", "k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource", "k8s.io/api/core/v1.PortworxVolumeSource", "k8s.io/api/core/v1.ProjectedVolumeSource", "k8s.io/api/core/v1.QuobyteVolumeSource", "k8s.io/api/core/v1.RBDVolumeSource", "k8s.io/api/core/v1.ScaleIOVolumeSource", "k8s.io/api/core/v1.SecretVolumeSource", "k8s.io/api/core/v1.StorageOSVolumeSource", "k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"},
	}
}

//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.APIGatewayStatus":        schema_fluid_cloudnative_fluid_api_v1alpha1_APIGatewayStatus(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioCompTemplateSpec": schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioCompTemplateSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioFuseSpec":         schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioFuseSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioRuntime":          schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioRuntime(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioRuntimeList":      schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioRuntimeList(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioRuntimeSpec":      schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioRuntimeSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.BackupLocation":          schema_fluid_cloudnative_fluid_api_v1alpha1_BackupLocation(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.CacheableNodeAffinity":   schema_fluid_cloudnative_fluid_api_v1alpha1_CacheableNodeAffinity(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.Condition":               schema_fluid_cloudnative_fluid_api_v1alpha1_Condition(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.Data":                    schema_fluid_cloudnative_fluid_api_v1alpha1_Data(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackup":              schema_fluid_cloudnative_fluid_api_v1alpha1_DataBackup(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackupList":          schema_fluid_cloudnative_fluid_api_v1alpha1_DataBackupList(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackupSpec":          schema_fluid_cloudnative_fluid_api_v1alpha1_DataBackupSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackupStatus":        schema_fluid_cloudnative_fluid_api_v1alpha1_DataBackupStatus(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoad":                schema_fluid_cloudnative_fluid_api_v1alpha1_DataLoad(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoadList":            schema_fluid_cloudnative_fluid_api_v1alpha1_DataLoadList(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoadSpec":            schema_fluid_cloudnative_fluid_api_v1alpha1_DataLoadSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoadStatus":          schema_fluid_cloudnative_fluid_api_v1alpha1_DataLoadStatus(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataRestoreLocation":     schema_fluid_cloudnative_fluid_api_v1alpha1_DataRestoreLocation(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.Dataset":                 schema_fluid_cloudnative_fluid_api_v1alpha1_Dataset(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetCondition":        schema_fluid_cloudnative_fluid_api_v1alpha1_DatasetCondition(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetList":             schema_fluid_cloudnative_fluid_api_v1alpha1_DatasetList(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetSpec":             schema_fluid_cloudnative_fluid_api_v1alpha1_DatasetSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetStatus":           schema_fluid_cloudnative_fluid_api_v1alpha1_DatasetStatus(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.EncryptOption":           schema_fluid_cloudnative_fluid_api_v1alpha1_EncryptOption(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.EncryptOptionSource":     schema_fluid_cloudnative_fluid_api_v1alpha1_EncryptOptionSource(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.HCFSStatus":              schema_fluid_cloudnative_fluid_api_v1alpha1_HCFSStatus(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.InitUsersSpec":           schema_fluid_cloudnative_fluid_api_v1alpha1_InitUsersSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoCompTemplateSpec":   schema_fluid_cloudnative_fluid_api_v1alpha1_JindoCompTemplateSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoFuseSpec":           schema_fluid_cloudnative_fluid_api_v1alpha1_JindoFuseSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoRuntime":            schema_fluid_cloudnative_fluid_api_v1alpha1_JindoRuntime(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoRuntimeList":        schema_fluid_cloudnative_fluid_api_v1alpha1_JindoRuntimeList(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoRuntimeSpec":        schema_fluid_cloudnative_fluid_api_v1alpha1_JindoRuntimeSpec(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.Level":                   schema_fluid_cloudnative_fluid_api_v1alpha1_Level(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.Mount":                   schema_fluid_cloudnative_fluid_api_v1alpha1_Mount(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.Runtime":                 schema_fluid_cloudnative_fluid_api_v1alpha1_Runtime(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeCondition":        schema_fluid_cloudnative_fluid_api_v1alpha1_RuntimeCondition(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeStatus":           schema_fluid_cloudnative_fluid_api_v1alpha1_RuntimeStatus(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.SecretKeySelector":       schema_fluid_cloudnative_fluid_api_v1alpha1_SecretKeySelector(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.TargetDataset":           schema_fluid_cloudnative_fluid_api_v1alpha1_TargetDataset(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.TargetPath":              schema_fluid_cloudnative_fluid_api_v1alpha1_TargetPath(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.TieredStore":             schema_fluid_cloudnative_fluid_api_v1alpha1_Tieredstore(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.User":                    schema_fluid_cloudnative_fluid_api_v1alpha1_User(ref),
		"github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec":             schema_fluid_cloudnative_fluid_api_v1alpha1_VersionSpec(ref),
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_APIGatewayStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "API Gateway",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"endpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "Endpoint for accessing",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioCompTemplateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AlluxioCompTemplateSpec is a description of the Alluxio commponents",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1. replicas is the min replicas of dataset in the cluster",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"jvmOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "Options for JVM",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"properties": {
						SchemaProps: spec.SchemaProps{
							Description: "Configurable properties for the Alluxio component. <br> Refer to <a href=\"https://docs.alluxio.io/os/user/stable/en/reference/Properties-List.html\">Alluxio Configuration Properties</a> for more info",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Ports used by Alluxio(e.g. rpc: 19998 for master)",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"integer"},
										Format: "int32",
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources that will be requested by the Alluxio component. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables that will be used by Alluxio component. <br>",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled or Disabled for the components. For now, only  API Gateway is enabled or disabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the master to fit on a node",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioFuseSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AlluxioFuseSpec is a description of the Alluxio Fuse",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image for Alluxio Fuse(e.g. alluxio/alluxio-fuse)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imageTag": {
						SchemaProps: spec.SchemaProps{
							Description: "Image Tag for Alluxio Fuse(e.g. 2.3.0-SNAPSHOT)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "One of the three policies: `Always`, `IfNotPresent`, `Never`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"jvmOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "Options for JVM",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"properties": {
						SchemaProps: spec.SchemaProps{
							Description: "Configurable properties for Alluxio System. <br> Refer to <a href=\"https://docs.alluxio.io/os/user/stable/en/reference/Properties-List.html\">Alluxio Configuration Properties</a> for more info",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables that will be used by Alluxio Fuse",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources that will be requested by Alluxio Fuse. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"args": {
						SchemaProps: spec.SchemaProps{
							Description: "Arguments that will be passed to Alluxio Fuse",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"global": {
						SchemaProps: spec.SchemaProps{
							Description: "If the fuse client should be deployed in global mode, otherwise the affinity should be considered",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the fuse client to fit on a node, this option only effect when global is enabled",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioRuntime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AlluxioRuntime is the Schema for the alluxioruntimes API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioRuntimeSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioRuntimeSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioRuntimeList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AlluxioRuntimeList contains a list of AlluxioRuntime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioRuntime"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioRuntime", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_AlluxioRuntimeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AlluxioRuntimeSpec defines the desired state of AlluxioRuntime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"alluxioVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "The version information that instructs fluid to orchestrate a particular version of Alluxio.",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec"),
						},
					},
					"master": {
						SchemaProps: spec.SchemaProps{
							Description: "Desired state for Alluxio master",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioCompTemplateSpec"),
						},
					},
					"jobMaster": {
						SchemaProps: spec.SchemaProps{
							Description: "Desired state for Alluxio job master",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioCompTemplateSpec"),
						},
					},
					"worker": {
						SchemaProps: spec.SchemaProps{
							Description: "Desired state for Alluxio worker",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioCompTemplateSpec"),
						},
					},
					"jobWorker": {
						SchemaProps: spec.SchemaProps{
							Description: "Desired state for Alluxio job Worker",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioCompTemplateSpec"),
						},
					},
					"apiGateway": {
						SchemaProps: spec.SchemaProps{
							Description: "Desired state for Alluxio API Gateway",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioCompTemplateSpec"),
						},
					},
					"initUsers": {
						SchemaProps: spec.SchemaProps{
							Description: "The spec of init users",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.InitUsersSpec"),
						},
					},
					"fuse": {
						SchemaProps: spec.SchemaProps{
							Description: "Desired state for Alluxio Fuse",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioFuseSpec"),
						},
					},
					"properties": {
						SchemaProps: spec.SchemaProps{
							Description: "Configurable properties for Alluxio system. <br> Refer to <a href=\"https://docs.alluxio.io/os/user/stable/en/reference/Properties-List.html\">Alluxio Configuration Properties</a> for more info",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"jvmOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "Options for JVM",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"tieredstore": {
						SchemaProps: spec.SchemaProps{
							Description: "Tiered storage used by Alluxio",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.TieredStore"),
						},
					},
					"data": {
						SchemaProps: spec.SchemaProps{
							Description: "Management strategies for the dataset to which the runtime is bound",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Data"),
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The replicas of the worker, need to be specified",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"runAs": {
						SchemaProps: spec.SchemaProps{
							Description: "Manage the user to run Alluxio Runtime",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.User"),
						},
					},
					"disablePrometheus": {
						SchemaProps: spec.SchemaProps{
							Description: "Disable monitoring for Alluxio Runtime Prometheus is enabled by default",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"hadoopConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the configMap used to support HDFS configurations when using HDFS as Alluxio's UFS. The configMap must be in the same namespace with the AlluxioRuntime. The configMap should contain user-specific HDFS conf files in it. For now, only \"hdfs-site.xml\" and \"core-site.xml\" are supported. It must take the filename of the conf file as the key and content of the file as the value.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioCompTemplateSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.AlluxioFuseSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.Data", "github.com/fluid-cloudnative/fluid/api/v1alpha1.InitUsersSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.TieredStore", "github.com/fluid-cloudnative/fluid/api/v1alpha1.User", "github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_BackupLocation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BackupLocation describes the final backup location of DataBackup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path describes the path of backup, in the form of local:///absolutePath or pvc://<pvcName>/subpath",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeName": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeName describes the nodeName of backup if Path is in the form of local://subpath",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_CacheableNodeAffinity(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CacheableNodeAffinity defines constraints that limit what nodes this dataset can be cached to.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"required": {
						SchemaProps: spec.SchemaProps{
							Description: "Required specifies hard node constraints that must be met.",
							Ref:         ref("k8s.io/api/core/v1.NodeSelector"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.NodeSelector"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_Condition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Condition explains the transitions on phase",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of condition, either `Complete` or `Failed`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of `True`, `False` or `Unknown`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "Reason for the condition's last transition",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Message is a human-readable message indicating details about the transition",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastProbeTime": {
						SchemaProps: spec.SchemaProps{
							Description: "LastProbeTime describes last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "LastTransitionTime describes last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_Data(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Data management strategies",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The copies of the dataset",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"pin": {
						SchemaProps: spec.SchemaProps{
							Description: "Pin the dataset or not. Refer to <a href=\"https://docs.alluxio.io/os/user/stable/en/operation/User-CLI.html#pin\">Alluxio User-CLI pin</a>",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataBackup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataBackup is the Schema for the backup API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackupSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackupStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackupSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackupStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataBackupList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataBackupList contains a list of DataBackup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackup"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataBackup", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataBackupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataBackupSpec defines the desired state of DataBackup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dataset": {
						SchemaProps: spec.SchemaProps{
							Description: "Dataset defines the target dataset of the DataBackup",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"backupPath": {
						SchemaProps: spec.SchemaProps{
							Description: "BackupPath defines the target path to save data of the DataBackup",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"runAs": {
						SchemaProps: spec.SchemaProps{
							Description: "Manage the user to run Alluxio DataBackup",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.User"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.User"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataBackupStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataBackupStatus defines the observed state of DataBackup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase describes current phase of DataBackup",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"backupLocation": {
						SchemaProps: spec.SchemaProps{
							Description: "BackupLocation tell user the location to save data of the DataBackup",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.BackupLocation"),
						},
					},
					"duration": {
						SchemaProps: spec.SchemaProps{
							Description: "Duration tell user how much time was spent to backup",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions consists of transition information on DataBackup's Phase",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"phase", "duration", "conditions"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.BackupLocation", "github.com/fluid-cloudnative/fluid/api/v1alpha1.Condition"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataLoad(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataLoad is the Schema for the dataloads API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoadSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoadStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoadSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoadStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataLoadList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataLoadList contains a list of DataLoad",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoad"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.DataLoad", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataLoadSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataLoadSpec defines the desired state of DataLoad",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dataset": {
						SchemaProps: spec.SchemaProps{
							Description: "Dataset defines the target dataset of the DataLoad",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.TargetDataset"),
						},
					},
					"loadMetadata": {
						SchemaProps: spec.SchemaProps{
							Description: "LoadMetadata specifies if the dataload job should load metadata",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "Target defines target paths that needs to be loaded",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.TargetPath"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.TargetDataset", "github.com/fluid-cloudnative/fluid/api/v1alpha1.TargetPath"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataLoadStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataLoadStatus defines the observed state of DataLoad",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase describes current phase of DataLoad",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions consists of transition information on DataLoad's Phase",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
					"duration": {
						SchemaProps: spec.SchemaProps{
							Description: "Duration tell user how much time was spent to load the data",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"phase", "conditions", "duration"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.Condition"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DataRestoreLocation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataRestoreLocation describes the spec restore location of  Dataset",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path describes the path of restore, in the form of  local://subpath or pvc://<pvcName>/subpath",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeName": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeName describes the nodeName of restore if Path is  in the form of local://subpath",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_Dataset(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Dataset is the Schema for the datasets API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DatasetCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Condition describes the state of the cache at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of cache condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DatasetList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatasetList contains a list of Dataset",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Dataset"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.Dataset", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DatasetSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatasetSpec defines the desired state of Dataset",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"mounts": {
						SchemaProps: spec.SchemaProps{
							Description: "Mount Points to be mounted on Alluxio.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Mount"),
									},
								},
							},
						},
					},
					"owner": {
						SchemaProps: spec.SchemaProps{
							Description: "The owner of the dataset",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.User"),
						},
					},
					"nodeAffinity": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeAffinity defines constraints that limit what nodes this dataset can be cached to. This field influences the scheduling of pods that use the cached dataset.",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.CacheableNodeAffinity"),
						},
					},
					"tolerations": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's tolerations.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"accessModes": {
						SchemaProps: spec.SchemaProps{
							Description: "AccessModes contains all ways the volume backing the PVC can be mounted",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"runtimes": {
						SchemaProps: spec.SchemaProps{
							Description: "Runtimes for supporting dataset (e.g. AlluxioRuntime)",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Runtime"),
									},
								},
							},
						},
					},
					"placement": {
						SchemaProps: spec.SchemaProps{
							Description: "Manage switch for opening Multiple datasets single node deployment or not",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dataRestoreLocation": {
						SchemaProps: spec.SchemaProps{
							Description: "DataRestoreLocation is the location to load data of dataset  been backuped",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DataRestoreLocation"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.CacheableNodeAffinity", "github.com/fluid-cloudnative/fluid/api/v1alpha1.DataRestoreLocation", "github.com/fluid-cloudnative/fluid/api/v1alpha1.Mount", "github.com/fluid-cloudnative/fluid/api/v1alpha1.Runtime", "github.com/fluid-cloudnative/fluid/api/v1alpha1.User", "k8s.io/api/core/v1.Toleration"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_DatasetStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatasetStatus defines the observed state of Dataset",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ufsTotal": {
						SchemaProps: spec.SchemaProps{
							Description: "Total in GB of dataset in the cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Dataset Phase. One of the four phases: `Pending`, `Bound`, `NotBound` and `Failed`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"runtimes": {
						SchemaProps: spec.SchemaProps{
							Description: "Runtimes for supporting dataset",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Runtime"),
									},
								},
							},
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current observed conditions.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetCondition"),
									},
								},
							},
						},
					},
					"cacheStates": {
						SchemaProps: spec.SchemaProps{
							Description: "CacheStatus represents the total resources of the dataset.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"hcfs": {
						SchemaProps: spec.SchemaProps{
							Description: "HCFSStatus represents hcfs info",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.HCFSStatus"),
						},
					},
					"fileNum": {
						SchemaProps: spec.SchemaProps{
							Description: "FileNum represents the file numbers of the dataset",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dataLoadRef": {
						SchemaProps: spec.SchemaProps{
							Description: "DataLoadRef specifies the running DataLoad job that targets this Dataset. This is mainly used as a lock to prevent concurrent DataLoad jobs.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dataBackupRef": {
						SchemaProps: spec.SchemaProps{
							Description: "DataBackupRef specifies the running Backup job that targets this Dataset. This is mainly used as a lock to prevent concurrent DataBackup jobs.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"conditions"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.DatasetCondition", "github.com/fluid-cloudnative/fluid/api/v1alpha1.HCFSStatus", "github.com/fluid-cloudnative/fluid/api/v1alpha1.Runtime"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_EncryptOption(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of encryptOption",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"valueFrom": {
						SchemaProps: spec.SchemaProps{
							Description: "The valueFrom of encryptOption",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.EncryptOptionSource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.EncryptOptionSource"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_EncryptOptionSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"secretKeyRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The encryptInfo obtained from secret",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.SecretKeySelector"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.SecretKeySelector"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_HCFSStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HCFS Endpoint info",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"endpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "Endpoint for accessing",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"underlayerFileSystemVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "Underlayer HCFS Compatible Version",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_InitUsersSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InitUsersSpec is a description of the initialize the users for runtime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image for initialize the users for runtime(e.g. alluxio/alluxio-User init)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imageTag": {
						SchemaProps: spec.SchemaProps{
							Description: "Image Tag for initialize the users for runtime(e.g. 2.3.0-SNAPSHOT)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "One of the three policies: `Always`, `IfNotPresent`, `Never`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables that will be used by initialize the users for runtime",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources that will be requested by initialize the users for runtime. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_JindoCompTemplateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JindoCompTemplateSpec is a description of the Jindo commponents",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1. replicas is the min replicas of dataset in the cluster",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"properties": {
						SchemaProps: spec.SchemaProps{
							Description: "Configurable properties for the Jindo component. <br>",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"integer"},
										Format: "int32",
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources that will be requested by the Jindo component. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables that will be used by Jindo component. <br>",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the master to fit on a node",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_JindoFuseSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JindoFuseSpec is a description of the Jindo Fuse",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image for Jindo Fuse(e.g. jindo/jindo-fuse)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imageTag": {
						SchemaProps: spec.SchemaProps{
							Description: "Image Tag for Jindo Fuse(e.g. 2.3.0-SNAPSHOT)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "One of the three policies: `Always`, `IfNotPresent`, `Never`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"properties": {
						SchemaProps: spec.SchemaProps{
							Description: "Configurable properties for Jindo System. <br>",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables that will be used by Jindo Fuse",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources that will be requested by Jindo Fuse. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"args": {
						SchemaProps: spec.SchemaProps{
							Description: "Arguments that will be passed to Jindo Fuse",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"global": {
						SchemaProps: spec.SchemaProps{
							Description: "If the fuse client should be deployed in global mode, otherwise the affinity should be considered",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the fuse client to fit on a node, this option only effect when global is enabled",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_JindoRuntime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JindoRuntime is the Schema for the jindoruntimes API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoRuntimeSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoRuntimeSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_JindoRuntimeList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JindoRuntimeList contains a list of JindoRuntime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoRuntime"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoRuntime", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_JindoRuntimeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JindoRuntimeSpec defines the desired state of JindoRuntime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"jindoVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "The version information that instructs fluid to orchestrate a particular version of Jindo.",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec"),
						},
					},
					"master": {
						SchemaProps: spec.SchemaProps{
							Description: "Desired state for Jindo master",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoCompTemplateSpec"),
						},
					},
					"worker": {
						SchemaProps: spec.SchemaProps{
							Description: "Desired state for Jindo worker",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoCompTemplateSpec"),
						},
					},
					"fuse": {
						SchemaProps: spec.SchemaProps{
							Description: "Desired state for Jindo Fuse",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoFuseSpec"),
						},
					},
					"properties": {
						SchemaProps: spec.SchemaProps{
							Description: "Configurable properties for Jindo system. <br>",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"tieredstore": {
						SchemaProps: spec.SchemaProps{
							Description: "Tiered storage used by Jindo",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.TieredStore"),
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The replicas of the worker, need to be specified",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"runAs": {
						SchemaProps: spec.SchemaProps{
							Description: "Manage the user to run Jindo Runtime",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.User"),
						},
					},
					"user": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"hadoopConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the configMap used to support HDFS configurations when using HDFS as Jindo's UFS. The configMap must be in the same namespace with the JindoRuntime. The configMap should contain user-specific HDFS conf files in it. For now, only \"hdfs-site.xml\" and \"core-site.xml\" are supported. It must take the filename of the conf file as the key and content of the file as the value.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secret": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoCompTemplateSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.JindoFuseSpec", "github.com/fluid-cloudnative/fluid/api/v1alpha1.TieredStore", "github.com/fluid-cloudnative/fluid/api/v1alpha1.User", "github.com/fluid-cloudnative/fluid/api/v1alpha1.VersionSpec"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_Level(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Level describes configurations a tier needs. <br> Refer to <a href=\"https://docs.alluxio.io/os/user/stable/en/core-services/Caching.html#configuring-tiered-storage\">Configuring Tiered Storage</a> for more info",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"mediumtype": {
						SchemaProps: spec.SchemaProps{
							Description: "Medium Type of the tier. One of the three types: `MEM`, `SSD`, `HDD`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "File paths to be used for the tier. Multiple paths are supported. Multiple paths should be separated with comma. For example: \"/mnt/cache1,/mnt/cache2\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"quota": {
						SchemaProps: spec.SchemaProps{
							Description: "Quota for the whole tier. (e.g. 100Gi) Please note that if there're multiple paths used for this tierstore, the quota will be equally divided into these paths. If you'd like to set quota for each, path, see QuotaList for more information.",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"quotaList": {
						SchemaProps: spec.SchemaProps{
							Description: "QuotaList are quotas used to set quota on multiple paths. Quotas should be separated with comma. Quotas in this list will be set to paths with the same order in Path. For example, with Path defined with \"/mnt/cache1,/mnt/cache2\" and QuotaList set to \"100Gi, 50Gi\", then we get 100GiB cache storage under \"/mnt/cache1\" and 50GiB under \"/mnt/cache2\". Also note that num of quotas must be consistent with the num of paths defined in Path.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"high": {
						SchemaProps: spec.SchemaProps{
							Description: "Ratio of high watermark of the tier (e.g. 0.9)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"low": {
						SchemaProps: spec.SchemaProps{
							Description: "Ratio of low watermark of the tier (e.g. 0.7)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"mediumtype"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_Mount(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Mount describes a mounting. <br> Refer to <a href=\"https://docs.alluxio.io/os/user/stable/en/ufs/S3.html\">Alluxio Storage Integrations</a> for more info",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"mountPoint": {
						SchemaProps: spec.SchemaProps{
							Description: "MountPoint is the mount point of source.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"options": {
						SchemaProps: spec.SchemaProps{
							Description: "The Mount Options. <br> Refer to <a href=\"https://docs.alluxio.io/os/user/stable/en/reference/Properties-List.html\">Mount Options</a>.  <br> The option has Prefix 'fs.' And you can Learn more from <a href=\"https://docs.alluxio.io/os/user/stable/en/ufs/S3.html\">The Storage Integrations</a>",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of mount",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "The path of mount, if not set will be /{Name}",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Defaults to false (read-write).",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"shared": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Defaults to false (shared).",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"encryptOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "The secret information",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.EncryptOption"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.EncryptOption"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_Runtime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Runtime describes a runtime to be used to support dataset",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the runtime object",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace of the runtime object",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"category": {
						SchemaProps: spec.SchemaProps{
							Description: "Category the runtime object belongs to (e.g. Accelerate)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Runtime object's type (e.g. Alluxio)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_RuntimeCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Condition describes the state of the cache at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of cache condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastProbeTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this condition was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_RuntimeStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RuntimeStatus defines the observed state of Runtime",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"valueFile": {
						SchemaProps: spec.SchemaProps{
							Description: "config map used to set configurations",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"masterPhase": {
						SchemaProps: spec.SchemaProps{
							Description: "MasterPhase is the master running phase",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"masterReason": {
						SchemaProps: spec.SchemaProps{
							Description: "Reason for Master's condition transition",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"workerPhase": {
						SchemaProps: spec.SchemaProps{
							Description: "WorkerPhase is the worker running phase",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"workerReason": {
						SchemaProps: spec.SchemaProps{
							Description: "Reason for Worker's condition transition",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"desiredWorkerNumberScheduled": {
						SchemaProps: spec.SchemaProps{
							Description: "The total number of nodes that should be running the runtime worker pod (including nodes correctly running the runtime worker pod).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"currentWorkerNumberScheduled": {
						SchemaProps: spec.SchemaProps{
							Description: "The total number of nodes that can be running the runtime worker pod (including nodes correctly running the runtime worker pod).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"workerNumberReady": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of nodes that should be running the runtime worker pod and have one or more of the runtime worker pod running and ready.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"workerNumberAvailable": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of nodes that should be running the runtime worker pod and have one or more of the runtime worker pod running and available (ready for at least spec.minReadySeconds)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"workerNumberUnavailable": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of nodes that should be running the runtime worker pod and have none of the runtime worker pod running and available (ready for at least spec.minReadySeconds)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"desiredMasterNumberScheduled": {
						SchemaProps: spec.SchemaProps{
							Description: "The total number of nodes that should be running the runtime pod (including nodes correctly running the runtime master pod).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"currentMasterNumberScheduled": {
						SchemaProps: spec.SchemaProps{
							Description: "The total number of nodes that should be running the runtime pod (including nodes correctly running the runtime master pod).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"masterNumberReady": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of nodes that should be running the runtime worker pod and have zero or more of the runtime master pod running and ready.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"fusePhase": {
						SchemaProps: spec.SchemaProps{
							Description: "FusePhase is the Fuse running phase",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fuseReason": {
						SchemaProps: spec.SchemaProps{
							Description: "Reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"currentFuseNumberScheduled": {
						SchemaProps: spec.SchemaProps{
							Description: "The total number of nodes that can be running the runtime Fuse pod (including nodes correctly running the runtime Fuse pod).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"desiredFuseNumberScheduled": {
						SchemaProps: spec.SchemaProps{
							Description: "The total number of nodes that should be running the runtime Fuse pod (including nodes correctly running the runtime Fuse pod).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"fuseNumberReady": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of nodes that should be running the runtime Fuse pod and have one or more of the runtime Fuse pod running and ready.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"fuseNumberUnavailable": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of nodes that should be running the runtime fuse pod and have none of the runtime fuse pod running and available (ready for at least spec.minReadySeconds)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"fuseNumberAvailable": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of nodes that should be running the runtime Fuse pod and have one or more of the runtime Fuse pod running and available (ready for at least spec.minReadySeconds)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"setupDuration": {
						SchemaProps: spec.SchemaProps{
							Description: "Duration tell user how much time was spent to setup the runtime",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a ddc runtime's current state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeCondition"),
									},
								},
							},
						},
					},
					"cacheStates": {
						SchemaProps: spec.SchemaProps{
							Description: "CacheStatus represents the total resources of the dataset.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"selector": {
						SchemaProps: spec.SchemaProps{
							Description: "Selector is used for auto-scaling",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiGateway": {
						SchemaProps: spec.SchemaProps{
							Description: "APIGatewayStatus represents rest api gateway status",
							Ref:         ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.APIGatewayStatus"),
						},
					},
				},
				Required: []string{"valueFile", "masterPhase", "workerPhase", "desiredWorkerNumberScheduled", "currentWorkerNumberScheduled", "workerNumberReady", "desiredMasterNumberScheduled", "currentMasterNumberScheduled", "masterNumberReady", "fusePhase", "currentFuseNumberScheduled", "desiredFuseNumberScheduled", "fuseNumberReady"},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.APIGatewayStatus", "github.com/fluid-cloudnative/fluid/api/v1alpha1.RuntimeCondition"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_SecretKeySelector(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of required secret",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"key": {
						SchemaProps: spec.SchemaProps{
							Description: "The required key in the secret",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_TargetDataset(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TargetDataset defines the target dataset of the DataLoad",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name defines name of the target dataset",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace defines namespace of the target dataset",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_TargetPath(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TargetPath defines the target path of the DataLoad",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path defines path to be load",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas defines how many replicas will be loaded",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"path"},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_Tieredstore(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TieredStore is a description of the tiered store",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"levels": {
						SchemaProps: spec.SchemaProps{
							Description: "configurations for multiple tiers",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/fluid-cloudnative/fluid/api/v1alpha1.Level"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/fluid-cloudnative/fluid/api/v1alpha1.Level"},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_User(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "User explains the user and group to run a Container",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "The uid to run the alluxio runtime",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"gid": {
						SchemaProps: spec.SchemaProps{
							Description: "The gid to run the alluxio runtime",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"user": {
						SchemaProps: spec.SchemaProps{
							Description: "The user name to run the alluxio runtime",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"group": {
						SchemaProps: spec.SchemaProps{
							Description: "The group name to run the alluxio runtime",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"uid", "gid", "user", "group"},
			},
		},
	}
}

func schema_fluid_cloudnative_fluid_api_v1alpha1_VersionSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VersionSpec represents the settings for the  version that fluid is orchestrating.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image (e.g. alluxio/alluxio)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imageTag": {
						SchemaProps: spec.SchemaProps{
							Description: "Image tag (e.g. 2.3.0-SNAPSHOT)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "One of the three policies: `Always`, `IfNotPresent`, `Never`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}
